/* Generated by Yosys 0.47 (git sha1 647d61dd9212365a3cd44db219660b8f90b95cbd, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module ifftmain(i_clk, i_reset, i_ce, i_sample, o_result, o_sync);
  reg \$auto$verilog_backend.cc:2352:dump_module$669  = 0;
  reg [31:0] _000_;
  reg _001_;
  reg _002_;
  reg _003_;
  reg _004_;
  wire _005_;
  reg [6:0] _006_;
  reg [31:0] _007_;
  reg [31:0] _008_;
  reg _009_;
  reg [31:0] _010_;
  reg _011_;
  reg [6:0] _012_;
  reg [6:0] _013_;
  reg [31:0] _014_;
  reg [31:0] _015_;
  reg _016_;
  reg _017_;
  reg [6:0] _018_;
  reg [6:0] _019_;
  reg [31:0] _020_;
  reg [31:0] _021_;
  wire [31:0] _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [31:0] _028_;
  reg [6:0] _029_;
  reg [31:0] _030_;
  reg [31:0] _031_;
  wire _032_;
  reg [2:0] _033_;
  reg [39:0] _034_;
  reg [2:0] _035_;
  reg [31:0] _036_;
  reg [31:0] _037_;
  reg [2:0] _038_;
  reg [31:0] _039_;
  reg [31:0] _040_;
  reg _041_;
  reg [39:0] _042_;
  reg [39:0] _043_;
  reg [39:0] _044_;
  reg [39:0] _045_;
  reg [39:0] _046_;
  reg [39:0] _047_;
  reg [39:0] _048_;
  reg [39:0] _049_;
  reg [3:0] _050_;
  reg [31:0] _051_;
  reg [31:0] _052_;
  reg [39:0] _053_;
  reg _054_;
  reg _055_;
  reg _056_;
  reg [1:0] _057_;
  reg [31:0] _058_;
  reg _059_;
  reg [3:0] _060_;
  reg [31:0] _061_;
  reg _062_;
  reg [2:0] _063_;
  reg [39:0] _064_;
  reg [2:0] _065_;
  reg [31:0] _066_;
  reg [31:0] _067_;
  reg [2:0] _068_;
  reg [31:0] _069_;
  reg [31:0] _070_;
  reg _071_;
  reg [3:0] _072_;
  reg _073_;
  reg _074_;
  reg [3:0] _075_;
  reg _076_;
  reg [39:0] _077_;
  wire [3:0] _078_;
  wire [3:0] _079_;
  wire [1:0] _080_;
  wire _081_;
  wire [39:0] _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  reg [2:0] _100_;
  reg [39:0] _101_;
  wire [31:0] _102_;
  wire [31:0] _103_;
  reg [2:0] _104_;
  reg [31:0] _105_;
  reg [31:0] _106_;
  reg [2:0] _107_;
  reg [31:0] _108_;
  reg [31:0] _109_;
  wire [39:0] _110_;
  wire [31:0] _111_;
  wire [31:0] _112_;
  wire _113_;
  wire [31:0] _114_;
  reg [19:0] _115_;
  reg [16:0] _116_;
  reg [19:0] _117_;
  reg [16:0] _118_;
  reg [20:0] _119_;
  reg [17:0] _120_;
  reg [36:0] _121_;
  reg [38:0] _122_;
  reg [36:0] _123_;
  reg [19:0] _124_;
  reg [19:0] _125_;
  reg [34:0] _126_;
  reg [34:0] _127_;
  reg [34:0] _128_;
  reg [38:0] _129_;
  reg [38:0] _130_;
  reg _131_;
  reg _132_;
  reg _133_;
  reg [39:0] _134_;
  reg [16:0] _135_;
  reg [16:0] _136_;
  reg [31:0] _137_;
  reg [31:0] _138_;
  reg [16:0] _139_;
  reg [16:0] _140_;
  reg [34:0] _141_;
  reg [34:0] _142_;
  reg [34:0] _143_;
  reg _144_;
  reg _145_;
  reg _146_;
  wire [16:0] _147_;
  wire [16:0] _148_;
  wire [20:0] _149_;
  wire [17:0] _150_;
  wire [36:0] _151_;
  wire [36:0] _152_;
  wire [38:0] _153_;
  wire [16:0] _154_;
  wire [16:0] _155_;
  wire [38:0] _156_;
  wire [38:0] _157_;
  wire [38:0] _158_;
  reg [15:0] _159_;
  wire [15:0] _160_;
  wire _161_;
  wire _162_;
  reg [15:0] _163_;
  wire [15:0] _164_;
  wire _165_;
  wire _166_;
  reg [15:0] _167_;
  wire [15:0] _168_;
  wire _169_;
  wire _170_;
  reg [15:0] _171_;
  wire [15:0] _172_;
  wire _173_;
  wire _174_;
  reg [15:0] _175_;
  reg [15:0] _176_;
  reg _177_;
  reg [16:0] _178_;
  reg [16:0] _179_;
  reg _180_;
  reg [16:0] _181_;
  reg [16:0] _182_;
  reg [1:0] _183_;
  reg _184_;
  reg _185_;
  reg _186_;
  reg [1:0] _187_;
  reg _188_;
  wire [16:0] _189_;
  wire [16:0] _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire [16:0] _197_;
  wire [16:0] _198_;
  reg [15:0] _199_;
  reg [15:0] _200_;
  reg [3:0] _201_;
  reg [39:0] _202_;
  reg [3:0] _203_;
  reg [31:0] _204_;
  reg [31:0] _205_;
  reg [3:0] _206_;
  reg [31:0] _207_;
  reg [31:0] _208_;
  reg _209_;
  reg [39:0] _210_;
  reg [39:0] _211_;
  reg [39:0] _212_;
  reg [39:0] _213_;
  reg [39:0] _214_;
  reg [39:0] _215_;
  reg [39:0] _216_;
  reg [39:0] _217_;
  reg [39:0] _218_;
  reg [39:0] _219_;
  reg [39:0] _220_;
  reg [39:0] _221_;
  reg [39:0] _222_;
  reg [39:0] _223_;
  reg [39:0] _224_;
  reg [39:0] _225_;
  reg [4:0] _226_;
  reg [31:0] _227_;
  reg [31:0] _228_;
  reg [39:0] _229_;
  reg _230_;
  reg _231_;
  reg _232_;
  reg [2:0] _233_;
  reg [31:0] _234_;
  reg _235_;
  reg [4:0] _236_;
  reg [31:0] _237_;
  reg _238_;
  reg [3:0] _239_;
  reg [39:0] _240_;
  reg [3:0] _241_;
  reg [31:0] _242_;
  reg [31:0] _243_;
  reg [3:0] _244_;
  reg [31:0] _245_;
  reg [31:0] _246_;
  reg _247_;
  reg [4:0] _248_;
  reg _249_;
  reg _250_;
  reg [4:0] _251_;
  reg _252_;
  reg [39:0] _253_;
  wire [4:0] _254_;
  wire [4:0] _255_;
  wire [2:0] _256_;
  wire _257_;
  wire [39:0] _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  reg [3:0] _276_;
  reg [39:0] _277_;
  wire [31:0] _278_;
  wire [31:0] _279_;
  reg [3:0] _280_;
  reg [31:0] _281_;
  reg [31:0] _282_;
  reg [3:0] _283_;
  reg [31:0] _284_;
  reg [31:0] _285_;
  wire [39:0] _286_;
  wire [31:0] _287_;
  wire [31:0] _288_;
  wire _289_;
  wire [31:0] _290_;
  reg [19:0] _291_;
  reg [16:0] _292_;
  reg [19:0] _293_;
  reg [16:0] _294_;
  reg [20:0] _295_;
  reg [17:0] _296_;
  reg [36:0] _297_;
  reg [38:0] _298_;
  reg [36:0] _299_;
  reg [19:0] _300_;
  reg [19:0] _301_;
  reg [34:0] _302_;
  reg [34:0] _303_;
  reg [34:0] _304_;
  reg [38:0] _305_;
  reg [38:0] _306_;
  reg _307_;
  reg _308_;
  reg _309_;
  reg [39:0] _310_;
  reg [16:0] _311_;
  reg [16:0] _312_;
  reg [31:0] _313_;
  reg [31:0] _314_;
  reg [16:0] _315_;
  reg [16:0] _316_;
  reg [34:0] _317_;
  reg [34:0] _318_;
  reg [34:0] _319_;
  reg _320_;
  reg _321_;
  reg _322_;
  wire [16:0] _323_;
  wire [16:0] _324_;
  wire [20:0] _325_;
  wire [17:0] _326_;
  wire [36:0] _327_;
  wire [36:0] _328_;
  wire [38:0] _329_;
  wire [16:0] _330_;
  wire [16:0] _331_;
  wire [38:0] _332_;
  wire [38:0] _333_;
  wire [38:0] _334_;
  reg [15:0] _335_;
  wire [15:0] _336_;
  wire _337_;
  wire _338_;
  reg [15:0] _339_;
  wire [15:0] _340_;
  wire _341_;
  wire _342_;
  reg [15:0] _343_;
  wire [15:0] _344_;
  wire _345_;
  wire _346_;
  reg [15:0] _347_;
  wire [15:0] _348_;
  wire _349_;
  wire _350_;
  reg [16:0] _351_;
  reg [16:0] _352_;
  reg [5:0] _353_;
  reg [31:0] _354_;
  reg [31:0] _355_;
  reg [31:0] _356_;
  reg _357_;
  reg [31:0] _358_;
  reg [15:0] _359_;
  reg [15:0] _360_;
  reg [31:0] _361_;
  reg [31:0] _362_;
  reg [2:0] _363_;
  reg [16:0] _364_;
  reg [16:0] _365_;
  reg _366_;
  reg [5:0] _367_;
  reg _368_;
  reg [2:0] _369_;
  reg _370_;
  wire [5:0] _371_;
  wire [16:0] _372_;
  wire [16:0] _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire _379_;
  wire [15:0] _380_;
  wire [15:0] _381_;
  wire [16:0] _382_;
  wire [16:0] _383_;
  reg [15:0] _384_;
  wire [15:0] _385_;
  wire _386_;
  reg [15:0] _387_;
  wire [15:0] _388_;
  wire _389_;
  reg [15:0] _390_;
  wire [15:0] _391_;
  wire _392_;
  reg [15:0] _393_;
  wire [15:0] _394_;
  wire _395_;
  reg [4:0] _396_;
  reg [39:0] _397_;
  reg [4:0] _398_;
  reg [31:0] _399_;
  reg [31:0] _400_;
  reg [4:0] _401_;
  reg [31:0] _402_;
  reg [31:0] _403_;
  reg _404_;
  reg [39:0] _405_;
  reg [39:0] _406_;
  reg [39:0] _407_;
  reg [39:0] _408_;
  reg [39:0] _409_;
  reg [39:0] _410_;
  reg [39:0] _411_;
  reg [39:0] _412_;
  reg [39:0] _413_;
  reg [39:0] _414_;
  reg [39:0] _415_;
  reg [39:0] _416_;
  reg [39:0] _417_;
  reg [39:0] _418_;
  reg [39:0] _419_;
  reg [39:0] _420_;
  reg [39:0] _421_;
  reg [39:0] _422_;
  reg [39:0] _423_;
  reg [39:0] _424_;
  reg [39:0] _425_;
  reg [39:0] _426_;
  reg [39:0] _427_;
  reg [39:0] _428_;
  reg [39:0] _429_;
  reg [39:0] _430_;
  reg [39:0] _431_;
  reg [39:0] _432_;
  reg [39:0] _433_;
  reg [39:0] _434_;
  reg [39:0] _435_;
  reg [39:0] _436_;
  reg [5:0] _437_;
  reg [31:0] _438_;
  reg [31:0] _439_;
  reg [39:0] _440_;
  reg _441_;
  reg _442_;
  reg _443_;
  reg [3:0] _444_;
  reg [31:0] _445_;
  reg _446_;
  reg [5:0] _447_;
  reg [31:0] _448_;
  reg _449_;
  reg [4:0] _450_;
  reg [39:0] _451_;
  reg [4:0] _452_;
  reg [31:0] _453_;
  reg [31:0] _454_;
  reg [4:0] _455_;
  reg [31:0] _456_;
  reg [31:0] _457_;
  reg _458_;
  reg [5:0] _459_;
  reg _460_;
  reg _461_;
  reg [5:0] _462_;
  reg _463_;
  reg [39:0] _464_;
  wire [5:0] _465_;
  wire [5:0] _466_;
  wire [3:0] _467_;
  wire _468_;
  wire [39:0] _469_;
  wire _470_;
  wire _471_;
  wire _472_;
  wire _473_;
  wire _474_;
  wire _475_;
  wire _476_;
  wire _477_;
  wire _478_;
  wire _479_;
  wire _480_;
  wire _481_;
  wire _482_;
  wire _483_;
  wire _484_;
  wire _485_;
  wire _486_;
  reg [4:0] _487_;
  reg [39:0] _488_;
  wire [31:0] _489_;
  wire [31:0] _490_;
  reg [4:0] _491_;
  reg [31:0] _492_;
  reg [31:0] _493_;
  reg [4:0] _494_;
  reg [31:0] _495_;
  reg [31:0] _496_;
  wire [39:0] _497_;
  wire [31:0] _498_;
  wire [31:0] _499_;
  wire _500_;
  wire [31:0] _501_;
  reg [19:0] _502_;
  reg [16:0] _503_;
  reg [19:0] _504_;
  reg [16:0] _505_;
  reg [20:0] _506_;
  reg [17:0] _507_;
  reg [36:0] _508_;
  reg [38:0] _509_;
  reg [36:0] _510_;
  reg [19:0] _511_;
  reg [19:0] _512_;
  reg [34:0] _513_;
  reg [34:0] _514_;
  reg [34:0] _515_;
  reg [38:0] _516_;
  reg [38:0] _517_;
  reg _518_;
  reg _519_;
  reg _520_;
  reg [39:0] _521_;
  reg [16:0] _522_;
  reg [16:0] _523_;
  reg [31:0] _524_;
  reg [31:0] _525_;
  reg [16:0] _526_;
  reg [16:0] _527_;
  reg [34:0] _528_;
  reg [34:0] _529_;
  reg [34:0] _530_;
  reg _531_;
  reg _532_;
  reg _533_;
  wire [16:0] _534_;
  wire [16:0] _535_;
  wire [20:0] _536_;
  wire [17:0] _537_;
  wire [36:0] _538_;
  wire [36:0] _539_;
  wire [38:0] _540_;
  wire [16:0] _541_;
  wire [16:0] _542_;
  wire [38:0] _543_;
  wire [38:0] _544_;
  wire [38:0] _545_;
  reg [15:0] _546_;
  wire [15:0] _547_;
  wire _548_;
  wire _549_;
  reg [15:0] _550_;
  wire [15:0] _551_;
  wire _552_;
  wire _553_;
  reg [15:0] _554_;
  wire [15:0] _555_;
  wire _556_;
  wire _557_;
  reg [15:0] _558_;
  wire [15:0] _559_;
  wire _560_;
  wire _561_;
  reg [1:0] _562_;
  reg [39:0] _563_;
  reg [1:0] _564_;
  reg [31:0] _565_;
  reg [31:0] _566_;
  reg [1:0] _567_;
  reg [31:0] _568_;
  reg [31:0] _569_;
  reg _570_;
  reg [39:0] _571_;
  reg [39:0] _572_;
  reg [39:0] _573_;
  reg [39:0] _574_;
  reg [2:0] _575_;
  reg [31:0] _576_;
  reg [31:0] _577_;
  reg [39:0] _578_;
  reg _579_;
  reg _580_;
  reg _581_;
  reg _582_;
  reg [31:0] _583_;
  reg _584_;
  reg [2:0] _585_;
  reg [31:0] _586_;
  reg _587_;
  reg [1:0] _588_;
  reg [39:0] _589_;
  reg [1:0] _590_;
  reg [31:0] _591_;
  reg [31:0] _592_;
  reg [1:0] _593_;
  reg [31:0] _594_;
  reg [31:0] _595_;
  reg _596_;
  reg [2:0] _597_;
  reg _598_;
  reg _599_;
  reg [2:0] _600_;
  reg _601_;
  reg [39:0] _602_;
  wire [2:0] _603_;
  wire [2:0] _604_;
  wire _605_;
  wire _606_;
  wire [39:0] _607_;
  wire _608_;
  wire _609_;
  wire _610_;
  wire _611_;
  wire _612_;
  wire _613_;
  wire _614_;
  wire _615_;
  wire _616_;
  wire _617_;
  wire _618_;
  wire _619_;
  wire _620_;
  wire _621_;
  wire _622_;
  wire _623_;
  wire _624_;
  reg [1:0] _625_;
  reg [39:0] _626_;
  wire [31:0] _627_;
  wire [31:0] _628_;
  reg [1:0] _629_;
  reg [31:0] _630_;
  reg [31:0] _631_;
  reg [1:0] _632_;
  reg [31:0] _633_;
  reg [31:0] _634_;
  wire [39:0] _635_;
  wire [31:0] _636_;
  wire [31:0] _637_;
  wire _638_;
  wire [31:0] _639_;
  reg [19:0] _640_;
  reg [16:0] _641_;
  reg [19:0] _642_;
  reg [16:0] _643_;
  reg [20:0] _644_;
  reg [17:0] _645_;
  reg [36:0] _646_;
  reg [38:0] _647_;
  reg [36:0] _648_;
  reg [19:0] _649_;
  reg [19:0] _650_;
  reg [34:0] _651_;
  reg [34:0] _652_;
  reg [34:0] _653_;
  reg [38:0] _654_;
  reg [38:0] _655_;
  reg _656_;
  reg _657_;
  reg _658_;
  reg [39:0] _659_;
  reg [16:0] _660_;
  reg [16:0] _661_;
  reg [31:0] _662_;
  reg [31:0] _663_;
  reg [16:0] _664_;
  reg [16:0] _665_;
  reg [34:0] _666_;
  reg [34:0] _667_;
  reg [34:0] _668_;
  reg _669_;
  reg _670_;
  reg _671_;
  wire [16:0] _672_;
  wire [16:0] _673_;
  wire [20:0] _674_;
  wire [17:0] _675_;
  wire [36:0] _676_;
  wire [36:0] _677_;
  wire [38:0] _678_;
  wire [16:0] _679_;
  wire [16:0] _680_;
  wire [38:0] _681_;
  wire [38:0] _682_;
  wire [38:0] _683_;
  reg [15:0] _684_;
  wire [15:0] _685_;
  wire _686_;
  wire _687_;
  reg [15:0] _688_;
  wire [15:0] _689_;
  wire _690_;
  wire _691_;
  reg [15:0] _692_;
  wire [15:0] _693_;
  wire _694_;
  wire _695_;
  reg [15:0] _696_;
  wire [15:0] _697_;
  wire _698_;
  wire _699_;
  wire _700_;
  wire _701_;
  wire _702_;
  wire [31:0] br_result;
  wire br_start;
  wire br_sync;
  input i_ce;
  wire i_ce;
  input i_clk;
  wire i_clk;
  input i_reset;
  wire i_reset;
  input [31:0] i_sample;
  wire [31:0] i_sample;
  output [31:0] o_result;
  reg [31:0] o_result;
  output o_sync;
  reg o_sync;
  reg r_br_started;
  wire \revstage.i_ce ;
  wire \revstage.i_clk ;
  wire [31:0] \revstage.i_in ;
  wire \revstage.i_reset ;
  reg \revstage.in_reset ;
  reg [31:0] \revstage.o_out ;
  reg \revstage.o_sync ;
  wire [6:0] \revstage.rdaddr ;
  reg [6:0] \revstage.wraddr ;
  reg [19:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
  reg [16:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
  reg [19:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
  reg [16:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
  reg [20:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
  reg [17:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
  reg [36:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  reg [38:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  reg [36:0] \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  wire \stage_16.HWBFLY.bfly.aux_s ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_i.i_ce ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_i.i_clk ;
  wire [36:0] \stage_16.HWBFLY.bfly.do_rnd_left_i.i_val ;
  reg [15:0] \stage_16.HWBFLY.bfly.do_rnd_left_i.o_val ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_r.i_ce ;
  wire \stage_16.HWBFLY.bfly.do_rnd_left_r.i_clk ;
  wire [36:0] \stage_16.HWBFLY.bfly.do_rnd_left_r.i_val ;
  reg [15:0] \stage_16.HWBFLY.bfly.do_rnd_left_r.o_val ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_i.i_ce ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_i.i_clk ;
  wire [38:0] \stage_16.HWBFLY.bfly.do_rnd_right_i.i_val ;
  reg [15:0] \stage_16.HWBFLY.bfly.do_rnd_right_i.o_val ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_r.i_ce ;
  wire \stage_16.HWBFLY.bfly.do_rnd_right_r.i_clk ;
  wire [38:0] \stage_16.HWBFLY.bfly.do_rnd_right_r.i_val ;
  reg [15:0] \stage_16.HWBFLY.bfly.do_rnd_right_r.o_val ;
  wire \stage_16.HWBFLY.bfly.i_aux ;
  wire \stage_16.HWBFLY.bfly.i_ce ;
  wire \stage_16.HWBFLY.bfly.i_clk ;
  wire [39:0] \stage_16.HWBFLY.bfly.i_coef ;
  wire [31:0] \stage_16.HWBFLY.bfly.i_left ;
  wire \stage_16.HWBFLY.bfly.i_reset ;
  wire [31:0] \stage_16.HWBFLY.bfly.i_right ;
  reg [19:0] \stage_16.HWBFLY.bfly.ir_coef_i ;
  reg [19:0] \stage_16.HWBFLY.bfly.ir_coef_r ;
  reg [34:0] \stage_16.HWBFLY.bfly.left_saved ;
  wire [36:0] \stage_16.HWBFLY.bfly.left_si ;
  wire [36:0] \stage_16.HWBFLY.bfly.left_sr ;
  reg [34:0] \stage_16.HWBFLY.bfly.leftv ;
  reg [34:0] \stage_16.HWBFLY.bfly.leftvv ;
  reg [38:0] \stage_16.HWBFLY.bfly.mpy_i ;
  reg [38:0] \stage_16.HWBFLY.bfly.mpy_r ;
  reg \stage_16.HWBFLY.bfly.o_aux ;
  wire [31:0] \stage_16.HWBFLY.bfly.o_left ;
  wire [31:0] \stage_16.HWBFLY.bfly.o_right ;
  wire [36:0] \stage_16.HWBFLY.bfly.p_one ;
  wire [38:0] \stage_16.HWBFLY.bfly.p_three ;
  wire [36:0] \stage_16.HWBFLY.bfly.p_two ;
  reg \stage_16.HWBFLY.bfly.r_aux ;
  reg \stage_16.HWBFLY.bfly.r_aux_2 ;
  reg [39:0] \stage_16.HWBFLY.bfly.r_coef ;
  reg [16:0] \stage_16.HWBFLY.bfly.r_dif_i ;
  reg [16:0] \stage_16.HWBFLY.bfly.r_dif_r ;
  reg [31:0] \stage_16.HWBFLY.bfly.r_left ;
  wire [15:0] \stage_16.HWBFLY.bfly.r_left_i ;
  wire [15:0] \stage_16.HWBFLY.bfly.r_left_r ;
  reg [31:0] \stage_16.HWBFLY.bfly.r_right ;
  wire [15:0] \stage_16.HWBFLY.bfly.r_right_i ;
  wire [15:0] \stage_16.HWBFLY.bfly.r_right_r ;
  reg [16:0] \stage_16.HWBFLY.bfly.r_sum_i ;
  reg [16:0] \stage_16.HWBFLY.bfly.r_sum_r ;
  wire [15:0] \stage_16.HWBFLY.bfly.rnd_left_i ;
  wire [15:0] \stage_16.HWBFLY.bfly.rnd_left_r ;
  wire [15:0] \stage_16.HWBFLY.bfly.rnd_right_i ;
  wire [15:0] \stage_16.HWBFLY.bfly.rnd_right_r ;
  wire [38:0] \stage_16.HWBFLY.bfly.w_one ;
  wire [38:0] \stage_16.HWBFLY.bfly.w_two ;
  reg \stage_16.b_started ;
  reg [39:0] \stage_16.cmem[0] ;
  reg [39:0] \stage_16.cmem[1] ;
  reg [39:0] \stage_16.cmem[2] ;
  reg [39:0] \stage_16.cmem[3] ;
  reg [39:0] \stage_16.cmem[4] ;
  reg [39:0] \stage_16.cmem[5] ;
  reg [39:0] \stage_16.cmem[6] ;
  reg [39:0] \stage_16.cmem[7] ;
  wire \stage_16.i_ce ;
  wire \stage_16.i_clk ;
  wire [31:0] \stage_16.i_data ;
  wire \stage_16.i_reset ;
  wire \stage_16.i_sync ;
  reg [3:0] \stage_16.iaddr ;
  reg [31:0] \stage_16.ib_a ;
  reg [31:0] \stage_16.ib_b ;
  reg [39:0] \stage_16.ib_c ;
  reg \stage_16.ib_sync ;
  reg \stage_16.idle ;
  reg [2:0] \stage_16.nxt_oaddr ;
  reg [31:0] \stage_16.o_data ;
  reg \stage_16.o_sync ;
  reg [3:0] \stage_16.oaddr ;
  wire [31:0] \stage_16.ob_a ;
  wire [31:0] \stage_16.ob_b ;
  wire \stage_16.ob_sync ;
  reg [31:0] \stage_16.pre_ovalue ;
  reg \stage_16.wait_for_sync ;
  wire \stage_2.do_rnd_i.i_ce ;
  wire \stage_2.do_rnd_i.i_clk ;
  wire [16:0] \stage_2.do_rnd_i.i_val ;
  reg [15:0] \stage_2.do_rnd_i.o_val ;
  wire \stage_2.do_rnd_r.i_ce ;
  wire \stage_2.do_rnd_r.i_clk ;
  wire [16:0] \stage_2.do_rnd_r.i_val ;
  reg [15:0] \stage_2.do_rnd_r.o_val ;
  wire \stage_2.i_ce ;
  wire \stage_2.i_clk ;
  wire [15:0] \stage_2.i_i ;
  wire [15:0] \stage_2.i_r ;
  wire \stage_2.i_reset ;
  wire \stage_2.i_sync ;
  wire [31:0] \stage_2.i_val ;
  reg [15:0] \stage_2.m_i ;
  reg [15:0] \stage_2.m_r ;
  wire [15:0] \stage_2.o_i ;
  wire [15:0] \stage_2.o_r ;
  reg \stage_2.o_sync ;
  wire [31:0] \stage_2.o_val ;
  reg [16:0] \stage_2.rnd_i ;
  reg [16:0] \stage_2.rnd_r ;
  reg \stage_2.stage ;
  reg [16:0] \stage_2.sto_i ;
  reg [16:0] \stage_2.sto_r ;
  reg [1:0] \stage_2.sync_pipe ;
  reg \stage_2.wait_for_sync ;
  reg [19:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
  reg [16:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
  reg [19:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
  reg [16:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
  reg [20:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
  reg [17:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
  reg [36:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  reg [38:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  reg [36:0] \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  wire \stage_32.HWBFLY.bfly.aux_s ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_i.i_ce ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_i.i_clk ;
  wire [36:0] \stage_32.HWBFLY.bfly.do_rnd_left_i.i_val ;
  reg [15:0] \stage_32.HWBFLY.bfly.do_rnd_left_i.o_val ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_r.i_ce ;
  wire \stage_32.HWBFLY.bfly.do_rnd_left_r.i_clk ;
  wire [36:0] \stage_32.HWBFLY.bfly.do_rnd_left_r.i_val ;
  reg [15:0] \stage_32.HWBFLY.bfly.do_rnd_left_r.o_val ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_i.i_ce ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_i.i_clk ;
  wire [38:0] \stage_32.HWBFLY.bfly.do_rnd_right_i.i_val ;
  reg [15:0] \stage_32.HWBFLY.bfly.do_rnd_right_i.o_val ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_r.i_ce ;
  wire \stage_32.HWBFLY.bfly.do_rnd_right_r.i_clk ;
  wire [38:0] \stage_32.HWBFLY.bfly.do_rnd_right_r.i_val ;
  reg [15:0] \stage_32.HWBFLY.bfly.do_rnd_right_r.o_val ;
  wire \stage_32.HWBFLY.bfly.i_aux ;
  wire \stage_32.HWBFLY.bfly.i_ce ;
  wire \stage_32.HWBFLY.bfly.i_clk ;
  wire [39:0] \stage_32.HWBFLY.bfly.i_coef ;
  wire [31:0] \stage_32.HWBFLY.bfly.i_left ;
  wire \stage_32.HWBFLY.bfly.i_reset ;
  wire [31:0] \stage_32.HWBFLY.bfly.i_right ;
  reg [19:0] \stage_32.HWBFLY.bfly.ir_coef_i ;
  reg [19:0] \stage_32.HWBFLY.bfly.ir_coef_r ;
  reg [34:0] \stage_32.HWBFLY.bfly.left_saved ;
  wire [36:0] \stage_32.HWBFLY.bfly.left_si ;
  wire [36:0] \stage_32.HWBFLY.bfly.left_sr ;
  reg [34:0] \stage_32.HWBFLY.bfly.leftv ;
  reg [34:0] \stage_32.HWBFLY.bfly.leftvv ;
  reg [38:0] \stage_32.HWBFLY.bfly.mpy_i ;
  reg [38:0] \stage_32.HWBFLY.bfly.mpy_r ;
  reg \stage_32.HWBFLY.bfly.o_aux ;
  wire [31:0] \stage_32.HWBFLY.bfly.o_left ;
  wire [31:0] \stage_32.HWBFLY.bfly.o_right ;
  wire [36:0] \stage_32.HWBFLY.bfly.p_one ;
  wire [38:0] \stage_32.HWBFLY.bfly.p_three ;
  wire [36:0] \stage_32.HWBFLY.bfly.p_two ;
  reg \stage_32.HWBFLY.bfly.r_aux ;
  reg \stage_32.HWBFLY.bfly.r_aux_2 ;
  reg [39:0] \stage_32.HWBFLY.bfly.r_coef ;
  reg [16:0] \stage_32.HWBFLY.bfly.r_dif_i ;
  reg [16:0] \stage_32.HWBFLY.bfly.r_dif_r ;
  reg [31:0] \stage_32.HWBFLY.bfly.r_left ;
  wire [15:0] \stage_32.HWBFLY.bfly.r_left_i ;
  wire [15:0] \stage_32.HWBFLY.bfly.r_left_r ;
  reg [31:0] \stage_32.HWBFLY.bfly.r_right ;
  wire [15:0] \stage_32.HWBFLY.bfly.r_right_i ;
  wire [15:0] \stage_32.HWBFLY.bfly.r_right_r ;
  reg [16:0] \stage_32.HWBFLY.bfly.r_sum_i ;
  reg [16:0] \stage_32.HWBFLY.bfly.r_sum_r ;
  wire [15:0] \stage_32.HWBFLY.bfly.rnd_left_i ;
  wire [15:0] \stage_32.HWBFLY.bfly.rnd_left_r ;
  wire [15:0] \stage_32.HWBFLY.bfly.rnd_right_i ;
  wire [15:0] \stage_32.HWBFLY.bfly.rnd_right_r ;
  wire [38:0] \stage_32.HWBFLY.bfly.w_one ;
  wire [38:0] \stage_32.HWBFLY.bfly.w_two ;
  reg \stage_32.b_started ;
  reg [39:0] \stage_32.cmem[0] ;
  reg [39:0] \stage_32.cmem[10] ;
  reg [39:0] \stage_32.cmem[11] ;
  reg [39:0] \stage_32.cmem[12] ;
  reg [39:0] \stage_32.cmem[13] ;
  reg [39:0] \stage_32.cmem[14] ;
  reg [39:0] \stage_32.cmem[15] ;
  reg [39:0] \stage_32.cmem[1] ;
  reg [39:0] \stage_32.cmem[2] ;
  reg [39:0] \stage_32.cmem[3] ;
  reg [39:0] \stage_32.cmem[4] ;
  reg [39:0] \stage_32.cmem[5] ;
  reg [39:0] \stage_32.cmem[6] ;
  reg [39:0] \stage_32.cmem[7] ;
  reg [39:0] \stage_32.cmem[8] ;
  reg [39:0] \stage_32.cmem[9] ;
  wire \stage_32.i_ce ;
  wire \stage_32.i_clk ;
  wire [31:0] \stage_32.i_data ;
  wire \stage_32.i_reset ;
  wire \stage_32.i_sync ;
  reg [4:0] \stage_32.iaddr ;
  reg [31:0] \stage_32.ib_a ;
  reg [31:0] \stage_32.ib_b ;
  reg [39:0] \stage_32.ib_c ;
  reg \stage_32.ib_sync ;
  reg \stage_32.idle ;
  reg [3:0] \stage_32.nxt_oaddr ;
  reg [31:0] \stage_32.o_data ;
  reg \stage_32.o_sync ;
  reg [4:0] \stage_32.oaddr ;
  wire [31:0] \stage_32.ob_a ;
  wire [31:0] \stage_32.ob_b ;
  wire \stage_32.ob_sync ;
  reg [31:0] \stage_32.pre_ovalue ;
  reg \stage_32.wait_for_sync ;
  reg [16:0] \stage_4.diff_i ;
  reg [16:0] \stage_4.diff_r ;
  wire \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [15:0] \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_4.do_rnd_diff_i.i_ce ;
  wire \stage_4.do_rnd_diff_i.i_clk ;
  wire [16:0] \stage_4.do_rnd_diff_i.i_val ;
  reg [15:0] \stage_4.do_rnd_diff_i.o_val ;
  wire \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [15:0] \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_4.do_rnd_diff_r.i_ce ;
  wire \stage_4.do_rnd_diff_r.i_clk ;
  wire [16:0] \stage_4.do_rnd_diff_r.i_val ;
  reg [15:0] \stage_4.do_rnd_diff_r.o_val ;
  wire \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [15:0] \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_4.do_rnd_sum_i.i_ce ;
  wire \stage_4.do_rnd_sum_i.i_clk ;
  wire [16:0] \stage_4.do_rnd_sum_i.i_val ;
  reg [15:0] \stage_4.do_rnd_sum_i.o_val ;
  wire \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [15:0] \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_4.do_rnd_sum_r.i_ce ;
  wire \stage_4.do_rnd_sum_r.i_clk ;
  wire [16:0] \stage_4.do_rnd_sum_r.i_val ;
  reg [15:0] \stage_4.do_rnd_sum_r.o_val ;
  wire \stage_4.i_ce ;
  wire \stage_4.i_clk ;
  wire [31:0] \stage_4.i_data ;
  wire [15:0] \stage_4.i_data_i ;
  wire [15:0] \stage_4.i_data_r ;
  wire \stage_4.i_reset ;
  wire \stage_4.i_sync ;
  reg [5:0] \stage_4.iaddr ;
  reg [31:0] \stage_4.imem[0] ;
  reg [31:0] \stage_4.imem[1] ;
  wire [15:0] \stage_4.imem_i ;
  wire [15:0] \stage_4.imem_r ;
  wire [15:0] \stage_4.n_rnd_diff_i ;
  wire [15:0] \stage_4.n_rnd_diff_r ;
  reg [31:0] \stage_4.o_data ;
  reg \stage_4.o_sync ;
  reg [31:0] \stage_4.ob_a ;
  wire [31:0] \stage_4.ob_b ;
  reg [15:0] \stage_4.ob_b_i ;
  reg [15:0] \stage_4.ob_b_r ;
  reg [31:0] \stage_4.omem[0] ;
  reg [31:0] \stage_4.omem[1] ;
  reg [2:0] \stage_4.pipeline ;
  wire [15:0] \stage_4.rnd_diff_i ;
  wire [15:0] \stage_4.rnd_diff_r ;
  wire [15:0] \stage_4.rnd_sum_i ;
  wire [15:0] \stage_4.rnd_sum_r ;
  reg [16:0] \stage_4.sum_i ;
  reg [16:0] \stage_4.sum_r ;
  reg \stage_4.wait_for_sync ;
  reg [19:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
  reg [16:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
  reg [19:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
  reg [16:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
  reg [20:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
  reg [17:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
  reg [36:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  reg [38:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  reg [36:0] \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  wire \stage_64.HWBFLY.bfly.aux_s ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_i.i_ce ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_i.i_clk ;
  wire [36:0] \stage_64.HWBFLY.bfly.do_rnd_left_i.i_val ;
  reg [15:0] \stage_64.HWBFLY.bfly.do_rnd_left_i.o_val ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_r.i_ce ;
  wire \stage_64.HWBFLY.bfly.do_rnd_left_r.i_clk ;
  wire [36:0] \stage_64.HWBFLY.bfly.do_rnd_left_r.i_val ;
  reg [15:0] \stage_64.HWBFLY.bfly.do_rnd_left_r.o_val ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_i.i_ce ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_i.i_clk ;
  wire [38:0] \stage_64.HWBFLY.bfly.do_rnd_right_i.i_val ;
  reg [15:0] \stage_64.HWBFLY.bfly.do_rnd_right_i.o_val ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_r.i_ce ;
  wire \stage_64.HWBFLY.bfly.do_rnd_right_r.i_clk ;
  wire [38:0] \stage_64.HWBFLY.bfly.do_rnd_right_r.i_val ;
  reg [15:0] \stage_64.HWBFLY.bfly.do_rnd_right_r.o_val ;
  wire \stage_64.HWBFLY.bfly.i_aux ;
  wire \stage_64.HWBFLY.bfly.i_ce ;
  wire \stage_64.HWBFLY.bfly.i_clk ;
  wire [39:0] \stage_64.HWBFLY.bfly.i_coef ;
  wire [31:0] \stage_64.HWBFLY.bfly.i_left ;
  wire \stage_64.HWBFLY.bfly.i_reset ;
  wire [31:0] \stage_64.HWBFLY.bfly.i_right ;
  reg [19:0] \stage_64.HWBFLY.bfly.ir_coef_i ;
  reg [19:0] \stage_64.HWBFLY.bfly.ir_coef_r ;
  reg [34:0] \stage_64.HWBFLY.bfly.left_saved ;
  wire [36:0] \stage_64.HWBFLY.bfly.left_si ;
  wire [36:0] \stage_64.HWBFLY.bfly.left_sr ;
  reg [34:0] \stage_64.HWBFLY.bfly.leftv ;
  reg [34:0] \stage_64.HWBFLY.bfly.leftvv ;
  reg [38:0] \stage_64.HWBFLY.bfly.mpy_i ;
  reg [38:0] \stage_64.HWBFLY.bfly.mpy_r ;
  reg \stage_64.HWBFLY.bfly.o_aux ;
  wire [31:0] \stage_64.HWBFLY.bfly.o_left ;
  wire [31:0] \stage_64.HWBFLY.bfly.o_right ;
  wire [36:0] \stage_64.HWBFLY.bfly.p_one ;
  wire [38:0] \stage_64.HWBFLY.bfly.p_three ;
  wire [36:0] \stage_64.HWBFLY.bfly.p_two ;
  reg \stage_64.HWBFLY.bfly.r_aux ;
  reg \stage_64.HWBFLY.bfly.r_aux_2 ;
  reg [39:0] \stage_64.HWBFLY.bfly.r_coef ;
  reg [16:0] \stage_64.HWBFLY.bfly.r_dif_i ;
  reg [16:0] \stage_64.HWBFLY.bfly.r_dif_r ;
  reg [31:0] \stage_64.HWBFLY.bfly.r_left ;
  wire [15:0] \stage_64.HWBFLY.bfly.r_left_i ;
  wire [15:0] \stage_64.HWBFLY.bfly.r_left_r ;
  reg [31:0] \stage_64.HWBFLY.bfly.r_right ;
  wire [15:0] \stage_64.HWBFLY.bfly.r_right_i ;
  wire [15:0] \stage_64.HWBFLY.bfly.r_right_r ;
  reg [16:0] \stage_64.HWBFLY.bfly.r_sum_i ;
  reg [16:0] \stage_64.HWBFLY.bfly.r_sum_r ;
  wire [15:0] \stage_64.HWBFLY.bfly.rnd_left_i ;
  wire [15:0] \stage_64.HWBFLY.bfly.rnd_left_r ;
  wire [15:0] \stage_64.HWBFLY.bfly.rnd_right_i ;
  wire [15:0] \stage_64.HWBFLY.bfly.rnd_right_r ;
  wire [38:0] \stage_64.HWBFLY.bfly.w_one ;
  wire [38:0] \stage_64.HWBFLY.bfly.w_two ;
  reg \stage_64.b_started ;
  reg [39:0] \stage_64.cmem[0] ;
  reg [39:0] \stage_64.cmem[10] ;
  reg [39:0] \stage_64.cmem[11] ;
  reg [39:0] \stage_64.cmem[12] ;
  reg [39:0] \stage_64.cmem[13] ;
  reg [39:0] \stage_64.cmem[14] ;
  reg [39:0] \stage_64.cmem[15] ;
  reg [39:0] \stage_64.cmem[16] ;
  reg [39:0] \stage_64.cmem[17] ;
  reg [39:0] \stage_64.cmem[18] ;
  reg [39:0] \stage_64.cmem[19] ;
  reg [39:0] \stage_64.cmem[1] ;
  reg [39:0] \stage_64.cmem[20] ;
  reg [39:0] \stage_64.cmem[21] ;
  reg [39:0] \stage_64.cmem[22] ;
  reg [39:0] \stage_64.cmem[23] ;
  reg [39:0] \stage_64.cmem[24] ;
  reg [39:0] \stage_64.cmem[25] ;
  reg [39:0] \stage_64.cmem[26] ;
  reg [39:0] \stage_64.cmem[27] ;
  reg [39:0] \stage_64.cmem[28] ;
  reg [39:0] \stage_64.cmem[29] ;
  reg [39:0] \stage_64.cmem[2] ;
  reg [39:0] \stage_64.cmem[30] ;
  reg [39:0] \stage_64.cmem[31] ;
  reg [39:0] \stage_64.cmem[3] ;
  reg [39:0] \stage_64.cmem[4] ;
  reg [39:0] \stage_64.cmem[5] ;
  reg [39:0] \stage_64.cmem[6] ;
  reg [39:0] \stage_64.cmem[7] ;
  reg [39:0] \stage_64.cmem[8] ;
  reg [39:0] \stage_64.cmem[9] ;
  wire \stage_64.i_ce ;
  wire \stage_64.i_clk ;
  wire [31:0] \stage_64.i_data ;
  wire \stage_64.i_reset ;
  wire \stage_64.i_sync ;
  reg [5:0] \stage_64.iaddr ;
  reg [31:0] \stage_64.ib_a ;
  reg [31:0] \stage_64.ib_b ;
  reg [39:0] \stage_64.ib_c ;
  reg \stage_64.ib_sync ;
  reg \stage_64.idle ;
  reg [4:0] \stage_64.nxt_oaddr ;
  reg [31:0] \stage_64.o_data ;
  reg \stage_64.o_sync ;
  reg [5:0] \stage_64.oaddr ;
  wire [31:0] \stage_64.ob_a ;
  wire [31:0] \stage_64.ob_b ;
  wire \stage_64.ob_sync ;
  reg [31:0] \stage_64.pre_ovalue ;
  reg \stage_64.wait_for_sync ;
  reg [19:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
  reg [16:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
  reg [19:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
  reg [16:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
  reg [20:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
  reg [17:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
  reg [36:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  reg [38:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  reg [36:0] \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  wire \stage_8.HWBFLY.bfly.aux_s ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_i.i_ce ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_i.i_clk ;
  wire [36:0] \stage_8.HWBFLY.bfly.do_rnd_left_i.i_val ;
  reg [15:0] \stage_8.HWBFLY.bfly.do_rnd_left_i.o_val ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_r.i_ce ;
  wire \stage_8.HWBFLY.bfly.do_rnd_left_r.i_clk ;
  wire [36:0] \stage_8.HWBFLY.bfly.do_rnd_left_r.i_val ;
  reg [15:0] \stage_8.HWBFLY.bfly.do_rnd_left_r.o_val ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_i.i_ce ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_i.i_clk ;
  wire [38:0] \stage_8.HWBFLY.bfly.do_rnd_right_i.i_val ;
  reg [15:0] \stage_8.HWBFLY.bfly.do_rnd_right_i.o_val ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ;
  wire [17:0] \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
  wire [15:0] \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_r.i_ce ;
  wire \stage_8.HWBFLY.bfly.do_rnd_right_r.i_clk ;
  wire [38:0] \stage_8.HWBFLY.bfly.do_rnd_right_r.i_val ;
  reg [15:0] \stage_8.HWBFLY.bfly.do_rnd_right_r.o_val ;
  wire \stage_8.HWBFLY.bfly.i_aux ;
  wire \stage_8.HWBFLY.bfly.i_ce ;
  wire \stage_8.HWBFLY.bfly.i_clk ;
  wire [39:0] \stage_8.HWBFLY.bfly.i_coef ;
  wire [31:0] \stage_8.HWBFLY.bfly.i_left ;
  wire \stage_8.HWBFLY.bfly.i_reset ;
  wire [31:0] \stage_8.HWBFLY.bfly.i_right ;
  reg [19:0] \stage_8.HWBFLY.bfly.ir_coef_i ;
  reg [19:0] \stage_8.HWBFLY.bfly.ir_coef_r ;
  reg [34:0] \stage_8.HWBFLY.bfly.left_saved ;
  wire [36:0] \stage_8.HWBFLY.bfly.left_si ;
  wire [36:0] \stage_8.HWBFLY.bfly.left_sr ;
  reg [34:0] \stage_8.HWBFLY.bfly.leftv ;
  reg [34:0] \stage_8.HWBFLY.bfly.leftvv ;
  reg [38:0] \stage_8.HWBFLY.bfly.mpy_i ;
  reg [38:0] \stage_8.HWBFLY.bfly.mpy_r ;
  reg \stage_8.HWBFLY.bfly.o_aux ;
  wire [31:0] \stage_8.HWBFLY.bfly.o_left ;
  wire [31:0] \stage_8.HWBFLY.bfly.o_right ;
  wire [36:0] \stage_8.HWBFLY.bfly.p_one ;
  wire [38:0] \stage_8.HWBFLY.bfly.p_three ;
  wire [36:0] \stage_8.HWBFLY.bfly.p_two ;
  reg \stage_8.HWBFLY.bfly.r_aux ;
  reg \stage_8.HWBFLY.bfly.r_aux_2 ;
  reg [39:0] \stage_8.HWBFLY.bfly.r_coef ;
  reg [16:0] \stage_8.HWBFLY.bfly.r_dif_i ;
  reg [16:0] \stage_8.HWBFLY.bfly.r_dif_r ;
  reg [31:0] \stage_8.HWBFLY.bfly.r_left ;
  wire [15:0] \stage_8.HWBFLY.bfly.r_left_i ;
  wire [15:0] \stage_8.HWBFLY.bfly.r_left_r ;
  reg [31:0] \stage_8.HWBFLY.bfly.r_right ;
  wire [15:0] \stage_8.HWBFLY.bfly.r_right_i ;
  wire [15:0] \stage_8.HWBFLY.bfly.r_right_r ;
  reg [16:0] \stage_8.HWBFLY.bfly.r_sum_i ;
  reg [16:0] \stage_8.HWBFLY.bfly.r_sum_r ;
  wire [15:0] \stage_8.HWBFLY.bfly.rnd_left_i ;
  wire [15:0] \stage_8.HWBFLY.bfly.rnd_left_r ;
  wire [15:0] \stage_8.HWBFLY.bfly.rnd_right_i ;
  wire [15:0] \stage_8.HWBFLY.bfly.rnd_right_r ;
  wire [38:0] \stage_8.HWBFLY.bfly.w_one ;
  wire [38:0] \stage_8.HWBFLY.bfly.w_two ;
  reg \stage_8.b_started ;
  reg [39:0] \stage_8.cmem[0] ;
  reg [39:0] \stage_8.cmem[1] ;
  reg [39:0] \stage_8.cmem[2] ;
  reg [39:0] \stage_8.cmem[3] ;
  wire \stage_8.i_ce ;
  wire \stage_8.i_clk ;
  wire [31:0] \stage_8.i_data ;
  wire \stage_8.i_reset ;
  wire \stage_8.i_sync ;
  reg [2:0] \stage_8.iaddr ;
  reg [31:0] \stage_8.ib_a ;
  reg [31:0] \stage_8.ib_b ;
  reg [39:0] \stage_8.ib_c ;
  reg \stage_8.ib_sync ;
  reg \stage_8.idle ;
  reg [1:0] \stage_8.nxt_oaddr ;
  reg [31:0] \stage_8.o_data ;
  reg \stage_8.o_sync ;
  reg [2:0] \stage_8.oaddr ;
  wire [31:0] \stage_8.ob_a ;
  wire [31:0] \stage_8.ob_b ;
  wire \stage_8.ob_sync ;
  reg [31:0] \stage_8.pre_ovalue ;
  reg \stage_8.wait_for_sync ;
  wire [31:0] w_d16;
  wire [31:0] w_d2;
  wire [31:0] w_d32;
  wire [31:0] w_d4;
  wire [31:0] w_d64;
  wire [31:0] w_d8;
  wire w_s16;
  wire w_s2;
  wire w_s32;
  wire w_s4;
  wire w_s64;
  wire w_s8;
  reg [31:0] \revstage.brmem  [127:0];
  assign _028_ = \revstage.brmem [\revstage.rdaddr ];
  reg [31:0] \stage_16.imem  [7:0];
  assign _102_ = \stage_16.imem [\stage_16.iaddr [2:0]];
  reg [31:0] \stage_16.omem  [7:0];
  assign _103_ = \stage_16.omem [\stage_16.nxt_oaddr ];
  reg [31:0] \stage_32.imem  [15:0];
  assign _278_ = \stage_32.imem [\stage_32.iaddr [3:0]];
  reg [31:0] \stage_32.omem  [15:0];
  assign _279_ = \stage_32.omem [\stage_32.nxt_oaddr ];
  reg [31:0] \stage_64.imem  [31:0];
  assign _489_ = \stage_64.imem [\stage_64.iaddr [4:0]];
  reg [31:0] \stage_64.omem  [31:0];
  assign _490_ = \stage_64.omem [\stage_64.nxt_oaddr ];
  reg [31:0] \stage_8.imem  [3:0];
  assign _627_ = \stage_8.imem [\stage_8.iaddr [1:0]];
  reg [31:0] \stage_8.omem  [3:0];
  assign _628_ = \stage_8.omem [\stage_8.nxt_oaddr ];
  assign _005_ = i_ce & br_start;
  assign _022_ = \revstage.wraddr  + 32'd1;
  assign _023_ = \revstage.wraddr [5:0] == 32'd0;
  assign _024_ = \revstage.i_ce  && _032_;
  assign _025_ = \revstage.i_ce  && _027_;
  assign _026_ = ! \revstage.wraddr [6];
  assign _027_ = ! \revstage.in_reset ;
  assign _032_ = & \revstage.wraddr [5:0];
  assign _078_ = \stage_16.iaddr  + 4'h1;
  assign _079_ = \stage_16.oaddr  + 1'h1;
  assign _080_ = \stage_16.oaddr [2:1] + 1'h1;
  assign _081_ = \stage_16.iaddr  == 32'd8;
  assign _082_ = + 32'd0;
  assign _083_ = \stage_16.i_ce  && _096_;
  assign _084_ = \stage_16.i_ce  && _089_;
  assign _085_ = \stage_16.ib_sync  && \stage_16.i_ce ;
  assign _086_ = \stage_16.ob_sync  && _093_;
  assign _087_ = \stage_16.i_ce  && _094_;
  assign _088_ = ! \stage_16.wait_for_sync ;
  assign _089_ = ! \stage_16.iaddr [3];
  assign _090_ = ! \stage_16.i_ce ;
  assign _091_ = ! \stage_16.i_ce ;
  assign _092_ = ! \stage_16.oaddr [3];
  assign _093_ = ! \stage_16.oaddr [3];
  assign _094_ = ! \stage_16.oaddr [3];
  assign _095_ = ! \stage_16.oaddr [3];
  assign _096_ = _088_ || \stage_16.i_sync ;
  assign _097_ = \stage_16.idle  || _090_;
  assign _098_ = \stage_16.idle  || _091_;
  assign _099_ = \stage_16.ob_sync  || \stage_16.b_started ;
  assign _110_ = \stage_16.idle  ? _082_ : \stage_16.ib_c ;
  assign _111_ = _097_ ? 32'd0 : \stage_16.ib_a ;
  assign _112_ = _098_ ? 32'd0 : \stage_16.ib_b ;
  assign _113_ = _092_ ? \stage_16.ob_sync  : 1'h0;
  assign _114_ = _095_ ? \stage_16.ob_a  : \stage_16.pre_ovalue ;
  assign _147_ = $signed(\stage_16.HWBFLY.bfly.r_left_r ) + $signed(\stage_16.HWBFLY.bfly.r_right_r );
  assign _148_ = $signed(\stage_16.HWBFLY.bfly.r_left_i ) + $signed(\stage_16.HWBFLY.bfly.r_right_i );
  assign _149_ = $signed(\stage_16.HWBFLY.bfly.ir_coef_i ) + $signed(\stage_16.HWBFLY.bfly.ir_coef_r );
  assign _150_ = $signed(\stage_16.HWBFLY.bfly.r_dif_r ) + $signed(\stage_16.HWBFLY.bfly.r_dif_i );
  assign _151_ = $signed(\stage_16.HWBFLY.bfly.CKPCE_ONE.p1c_in ) * $signed(\stage_16.HWBFLY.bfly.CKPCE_ONE.p1d_in );
  assign _152_ = $signed(\stage_16.HWBFLY.bfly.CKPCE_ONE.p2c_in ) * $signed(\stage_16.HWBFLY.bfly.CKPCE_ONE.p2d_in );
  assign _153_ = $signed(\stage_16.HWBFLY.bfly.CKPCE_ONE.p3c_in ) * $signed(\stage_16.HWBFLY.bfly.CKPCE_ONE.p3d_in );
  assign _154_ = $signed(\stage_16.HWBFLY.bfly.r_left_r ) - $signed(\stage_16.HWBFLY.bfly.r_right_r );
  assign _155_ = $signed(\stage_16.HWBFLY.bfly.r_left_i ) - $signed(\stage_16.HWBFLY.bfly.r_right_i );
  assign _156_ = $signed(\stage_16.HWBFLY.bfly.w_one ) - $signed(\stage_16.HWBFLY.bfly.w_two );
  assign _157_ = $signed(\stage_16.HWBFLY.bfly.p_three ) - $signed(\stage_16.HWBFLY.bfly.w_one );
  assign _158_ = $signed(_157_) - $signed(\stage_16.HWBFLY.bfly.w_two );
  assign _160_ = \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _161_ = ! \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _162_ = | \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _164_ = \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _165_ = ! \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _166_ = | \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _168_ = \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _169_ = ! \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _170_ = | \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _172_ = \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _173_ = ! \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _174_ = | \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _189_ = $signed(\stage_2.m_r ) + $signed(\stage_2.i_r );
  assign _190_ = $signed(\stage_2.m_i ) + $signed(\stage_2.i_i );
  assign _191_ = \stage_2.i_ce  && _196_;
  assign _192_ = _191_ && _194_;
  assign _193_ = ! \stage_2.wait_for_sync ;
  assign _194_ = ! \stage_2.stage ;
  assign _195_ = ! \stage_2.stage ;
  assign _196_ = _193_ || \stage_2.i_sync ;
  assign _197_ = $signed(\stage_2.m_r ) - $signed(\stage_2.i_r );
  assign _198_ = $signed(\stage_2.m_i ) - $signed(\stage_2.i_i );
  assign _254_ = \stage_32.iaddr  + 5'h01;
  assign _255_ = \stage_32.oaddr  + 1'h1;
  assign _256_ = \stage_32.oaddr [3:1] + 1'h1;
  assign _257_ = \stage_32.iaddr  == 32'd16;
  assign _258_ = + 32'd0;
  assign _259_ = \stage_32.i_ce  && _272_;
  assign _260_ = \stage_32.i_ce  && _265_;
  assign _261_ = \stage_32.ib_sync  && \stage_32.i_ce ;
  assign _262_ = \stage_32.ob_sync  && _269_;
  assign _263_ = \stage_32.i_ce  && _270_;
  assign _264_ = ! \stage_32.wait_for_sync ;
  assign _265_ = ! \stage_32.iaddr [4];
  assign _266_ = ! \stage_32.i_ce ;
  assign _267_ = ! \stage_32.i_ce ;
  assign _268_ = ! \stage_32.oaddr [4];
  assign _269_ = ! \stage_32.oaddr [4];
  assign _270_ = ! \stage_32.oaddr [4];
  assign _271_ = ! \stage_32.oaddr [4];
  assign _272_ = _264_ || \stage_32.i_sync ;
  assign _273_ = \stage_32.idle  || _266_;
  assign _274_ = \stage_32.idle  || _267_;
  assign _275_ = \stage_32.ob_sync  || \stage_32.b_started ;
  assign _286_ = \stage_32.idle  ? _258_ : \stage_32.ib_c ;
  assign _287_ = _273_ ? 32'd0 : \stage_32.ib_a ;
  assign _288_ = _274_ ? 32'd0 : \stage_32.ib_b ;
  assign _289_ = _268_ ? \stage_32.ob_sync  : 1'h0;
  assign _290_ = _271_ ? \stage_32.ob_a  : \stage_32.pre_ovalue ;
  assign _323_ = $signed(\stage_32.HWBFLY.bfly.r_left_r ) + $signed(\stage_32.HWBFLY.bfly.r_right_r );
  assign _324_ = $signed(\stage_32.HWBFLY.bfly.r_left_i ) + $signed(\stage_32.HWBFLY.bfly.r_right_i );
  assign _325_ = $signed(\stage_32.HWBFLY.bfly.ir_coef_i ) + $signed(\stage_32.HWBFLY.bfly.ir_coef_r );
  assign _326_ = $signed(\stage_32.HWBFLY.bfly.r_dif_r ) + $signed(\stage_32.HWBFLY.bfly.r_dif_i );
  assign _327_ = $signed(\stage_32.HWBFLY.bfly.CKPCE_ONE.p1c_in ) * $signed(\stage_32.HWBFLY.bfly.CKPCE_ONE.p1d_in );
  assign _328_ = $signed(\stage_32.HWBFLY.bfly.CKPCE_ONE.p2c_in ) * $signed(\stage_32.HWBFLY.bfly.CKPCE_ONE.p2d_in );
  assign _329_ = $signed(\stage_32.HWBFLY.bfly.CKPCE_ONE.p3c_in ) * $signed(\stage_32.HWBFLY.bfly.CKPCE_ONE.p3d_in );
  assign _330_ = $signed(\stage_32.HWBFLY.bfly.r_left_r ) - $signed(\stage_32.HWBFLY.bfly.r_right_r );
  assign _331_ = $signed(\stage_32.HWBFLY.bfly.r_left_i ) - $signed(\stage_32.HWBFLY.bfly.r_right_i );
  assign _332_ = $signed(\stage_32.HWBFLY.bfly.w_one ) - $signed(\stage_32.HWBFLY.bfly.w_two );
  assign _333_ = $signed(\stage_32.HWBFLY.bfly.p_three ) - $signed(\stage_32.HWBFLY.bfly.w_one );
  assign _334_ = $signed(_333_) - $signed(\stage_32.HWBFLY.bfly.w_two );
  assign _336_ = \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _337_ = ! \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _338_ = | \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _340_ = \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _341_ = ! \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _342_ = | \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _344_ = \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _345_ = ! \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _346_ = | \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _348_ = \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _349_ = ! \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _350_ = | \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _371_ = \stage_4.iaddr  + 1'h1;
  assign _372_ = $signed(\stage_4.imem_r ) + $signed(\stage_4.i_data_r );
  assign _373_ = $signed(\stage_4.imem_i ) + $signed(\stage_4.i_data_i );
  assign _374_ = \stage_4.iaddr [2:0] == 3'h5;
  assign _375_ = \stage_4.i_ce  && _379_;
  assign _376_ = \stage_4.i_ce  && \stage_4.iaddr [1];
  assign _377_ = ! \stage_4.wait_for_sync ;
  assign _378_ = ! \stage_4.iaddr [0];
  assign _379_ = _377_ || \stage_4.i_sync ;
  assign _380_ = - $signed(\stage_4.rnd_diff_r );
  assign _381_ = - $signed(\stage_4.rnd_diff_i );
  assign _382_ = $signed(\stage_4.imem_r ) - $signed(\stage_4.i_data_r );
  assign _383_ = $signed(\stage_4.imem_i ) - $signed(\stage_4.i_data_i );
  assign _385_ = \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _386_ = ! \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _388_ = \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _389_ = ! \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _391_ = \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _392_ = ! \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _394_ = \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _395_ = ! \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _465_ = \stage_64.iaddr  + 6'h01;
  assign _466_ = \stage_64.oaddr  + 1'h1;
  assign _467_ = \stage_64.oaddr [4:1] + 1'h1;
  assign _468_ = \stage_64.iaddr  == 32'd32;
  assign _469_ = + 32'd0;
  assign _470_ = \stage_64.i_ce  && _483_;
  assign _471_ = \stage_64.i_ce  && _476_;
  assign _472_ = \stage_64.ib_sync  && \stage_64.i_ce ;
  assign _473_ = \stage_64.ob_sync  && _480_;
  assign _474_ = \stage_64.i_ce  && _481_;
  assign _475_ = ! \stage_64.wait_for_sync ;
  assign _476_ = ! \stage_64.iaddr [5];
  assign _477_ = ! \stage_64.i_ce ;
  assign _478_ = ! \stage_64.i_ce ;
  assign _479_ = ! \stage_64.oaddr [5];
  assign _480_ = ! \stage_64.oaddr [5];
  assign _481_ = ! \stage_64.oaddr [5];
  assign _482_ = ! \stage_64.oaddr [5];
  assign _483_ = _475_ || \stage_64.i_sync ;
  assign _484_ = \stage_64.idle  || _477_;
  assign _485_ = \stage_64.idle  || _478_;
  assign _486_ = \stage_64.ob_sync  || \stage_64.b_started ;
  assign _497_ = \stage_64.idle  ? _469_ : \stage_64.ib_c ;
  assign _498_ = _484_ ? 32'd0 : \stage_64.ib_a ;
  assign _499_ = _485_ ? 32'd0 : \stage_64.ib_b ;
  assign _500_ = _479_ ? \stage_64.ob_sync  : 1'h0;
  assign _501_ = _482_ ? \stage_64.ob_a  : \stage_64.pre_ovalue ;
  assign _534_ = $signed(\stage_64.HWBFLY.bfly.r_left_r ) + $signed(\stage_64.HWBFLY.bfly.r_right_r );
  assign _535_ = $signed(\stage_64.HWBFLY.bfly.r_left_i ) + $signed(\stage_64.HWBFLY.bfly.r_right_i );
  assign _536_ = $signed(\stage_64.HWBFLY.bfly.ir_coef_i ) + $signed(\stage_64.HWBFLY.bfly.ir_coef_r );
  assign _537_ = $signed(\stage_64.HWBFLY.bfly.r_dif_r ) + $signed(\stage_64.HWBFLY.bfly.r_dif_i );
  assign _538_ = $signed(\stage_64.HWBFLY.bfly.CKPCE_ONE.p1c_in ) * $signed(\stage_64.HWBFLY.bfly.CKPCE_ONE.p1d_in );
  assign _539_ = $signed(\stage_64.HWBFLY.bfly.CKPCE_ONE.p2c_in ) * $signed(\stage_64.HWBFLY.bfly.CKPCE_ONE.p2d_in );
  assign _540_ = $signed(\stage_64.HWBFLY.bfly.CKPCE_ONE.p3c_in ) * $signed(\stage_64.HWBFLY.bfly.CKPCE_ONE.p3d_in );
  assign _541_ = $signed(\stage_64.HWBFLY.bfly.r_left_r ) - $signed(\stage_64.HWBFLY.bfly.r_right_r );
  assign _542_ = $signed(\stage_64.HWBFLY.bfly.r_left_i ) - $signed(\stage_64.HWBFLY.bfly.r_right_i );
  assign _543_ = $signed(\stage_64.HWBFLY.bfly.w_one ) - $signed(\stage_64.HWBFLY.bfly.w_two );
  assign _544_ = $signed(\stage_64.HWBFLY.bfly.p_three ) - $signed(\stage_64.HWBFLY.bfly.w_one );
  assign _545_ = $signed(_544_) - $signed(\stage_64.HWBFLY.bfly.w_two );
  assign _547_ = \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _548_ = ! \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _549_ = | \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _551_ = \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _552_ = ! \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _553_ = | \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _555_ = \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _556_ = ! \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _557_ = | \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _559_ = \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _560_ = ! \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _561_ = | \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _603_ = \stage_8.iaddr  + 3'h1;
  assign _604_ = \stage_8.oaddr  + 1'h1;
  assign _605_ = \stage_8.oaddr [1] + 1'h1;
  assign _606_ = \stage_8.iaddr  == 32'd4;
  assign _607_ = + 32'd0;
  assign _608_ = \stage_8.i_ce  && _621_;
  assign _609_ = \stage_8.i_ce  && _614_;
  assign _610_ = \stage_8.ib_sync  && \stage_8.i_ce ;
  assign _611_ = \stage_8.ob_sync  && _618_;
  assign _612_ = \stage_8.i_ce  && _619_;
  assign _613_ = ! \stage_8.wait_for_sync ;
  assign _614_ = ! \stage_8.iaddr [2];
  assign _615_ = ! \stage_8.i_ce ;
  assign _616_ = ! \stage_8.i_ce ;
  assign _617_ = ! \stage_8.oaddr [2];
  assign _618_ = ! \stage_8.oaddr [2];
  assign _619_ = ! \stage_8.oaddr [2];
  assign _620_ = ! \stage_8.oaddr [2];
  assign _621_ = _613_ || \stage_8.i_sync ;
  assign _622_ = \stage_8.idle  || _615_;
  assign _623_ = \stage_8.idle  || _616_;
  assign _624_ = \stage_8.ob_sync  || \stage_8.b_started ;
  assign _635_ = \stage_8.idle  ? _607_ : \stage_8.ib_c ;
  assign _636_ = _622_ ? 32'd0 : \stage_8.ib_a ;
  assign _637_ = _623_ ? 32'd0 : \stage_8.ib_b ;
  assign _638_ = _617_ ? \stage_8.ob_sync  : 1'h0;
  assign _639_ = _620_ ? \stage_8.ob_a  : \stage_8.pre_ovalue ;
  assign _672_ = $signed(\stage_8.HWBFLY.bfly.r_left_r ) + $signed(\stage_8.HWBFLY.bfly.r_right_r );
  assign _673_ = $signed(\stage_8.HWBFLY.bfly.r_left_i ) + $signed(\stage_8.HWBFLY.bfly.r_right_i );
  assign _674_ = $signed(\stage_8.HWBFLY.bfly.ir_coef_i ) + $signed(\stage_8.HWBFLY.bfly.ir_coef_r );
  assign _675_ = $signed(\stage_8.HWBFLY.bfly.r_dif_r ) + $signed(\stage_8.HWBFLY.bfly.r_dif_i );
  assign _676_ = $signed(\stage_8.HWBFLY.bfly.CKPCE_ONE.p1c_in ) * $signed(\stage_8.HWBFLY.bfly.CKPCE_ONE.p1d_in );
  assign _677_ = $signed(\stage_8.HWBFLY.bfly.CKPCE_ONE.p2c_in ) * $signed(\stage_8.HWBFLY.bfly.CKPCE_ONE.p2d_in );
  assign _678_ = $signed(\stage_8.HWBFLY.bfly.CKPCE_ONE.p3c_in ) * $signed(\stage_8.HWBFLY.bfly.CKPCE_ONE.p3d_in );
  assign _679_ = $signed(\stage_8.HWBFLY.bfly.r_left_r ) - $signed(\stage_8.HWBFLY.bfly.r_right_r );
  assign _680_ = $signed(\stage_8.HWBFLY.bfly.r_left_i ) - $signed(\stage_8.HWBFLY.bfly.r_right_i );
  assign _681_ = $signed(\stage_8.HWBFLY.bfly.w_one ) - $signed(\stage_8.HWBFLY.bfly.w_two );
  assign _682_ = $signed(\stage_8.HWBFLY.bfly.p_three ) - $signed(\stage_8.HWBFLY.bfly.w_one );
  assign _683_ = $signed(_682_) - $signed(\stage_8.HWBFLY.bfly.w_two );
  assign _685_ = \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _686_ = ! \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _687_ = | \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _689_ = \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _690_ = ! \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _691_ = | \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _693_ = \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _694_ = ! \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _695_ = | \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _697_ = \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  + 16'h0001;
  assign _698_ = ! \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit ;
  assign _699_ = | \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits ;
  assign _700_ = ! i_reset;
  assign _701_ = r_br_started || w_s2;
  assign _702_ = r_br_started || w_s2;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _016_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \revstage.in_reset  <= _016_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _018_ = 7'h00;
  end
  always @* begin
  end
  initial begin
      \revstage.wraddr  <= _018_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _017_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \revstage.o_sync  <= _017_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _009_ = \revstage.in_reset ;
    if (\revstage.i_reset ) begin
      _009_ = 1'h1;
    end else begin
      if (_024_) begin
        _009_ = 1'h0;
      end else begin
      end
    end
  end
  always @(posedge \revstage.i_clk ) begin
      \revstage.in_reset  <= _009_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _012_ = \revstage.wraddr ;
    _006_ = _013_;
    _007_ = _014_;
    _008_ = _015_;
    if (\revstage.i_reset ) begin
      _013_ = 7'hxx;
      _014_ = 32'hxxxxxxxx;
      _015_ = 32'd0;
      _012_ = 7'h00;
    end else begin
      _013_ = _019_;
      _014_ = _020_;
      _015_ = _021_;
      if (\revstage.i_ce ) begin
        _019_ = \revstage.wraddr ;
        _020_ = \revstage.i_in ;
        _021_ = 32'd4294967295;
        _012_ = _022_[6:0];
      end else begin
        _019_ = 7'hxx;
        _020_ = 32'hxxxxxxxx;
        _021_ = 32'd0;
      end
    end
  end
  always @(posedge \revstage.i_clk ) begin
      \revstage.wraddr  <= _012_;
      _029_ <= _006_;
      _030_ <= _007_;
      _031_ <= _008_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _010_ = \revstage.o_out ;
    if (\revstage.i_ce ) begin
      _010_ = _028_;
    end else begin
    end
  end
  always @(posedge \revstage.i_clk ) begin
      \revstage.o_out  <= _010_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _011_ = \revstage.o_sync ;
    if (\revstage.i_reset ) begin
      _011_ = 1'h0;
    end else begin
      if (_025_) begin
        _011_ = _023_;
      end else begin
      end
    end
  end
  always @(posedge \revstage.i_clk ) begin
      \revstage.o_sync  <= _011_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _042_ = 40'h4000000000;
    _043_ = 40'h3b20d187de;
    _044_ = 40'h2d4142d414;
    _045_ = 40'h187de3b20d;
    _046_ = 40'h0000040000;
    _047_ = 40'he78223b20d;
    _048_ = 40'hd2bec2d414;
    _049_ = 40'hc4df3187de;
  end
  always @* begin
      \stage_16.cmem[0]  <= _042_;
      \stage_16.cmem[1]  <= _043_;
      \stage_16.cmem[2]  <= _044_;
      \stage_16.cmem[3]  <= _045_;
      \stage_16.cmem[4]  <= _046_;
      \stage_16.cmem[5]  <= _047_;
      \stage_16.cmem[6]  <= _048_;
      \stage_16.cmem[7]  <= _049_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _076_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \stage_16.wait_for_sync  <= _076_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _072_ = 4'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.iaddr  <= _072_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _073_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.ib_sync  <= _073_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _075_ = 4'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.oaddr  <= _075_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _074_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.o_sync  <= _074_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _071_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.b_started  <= _071_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _055_ = 1'h0;
  end
  always @* begin
      \stage_16.idle  <= _055_;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _062_ = \stage_16.wait_for_sync ;
    _050_ = \stage_16.iaddr ;
    if (\stage_16.i_reset ) begin
      _062_ = 1'h1;
      _050_ = 4'h0;
    end else begin
      if (_083_) begin
        _050_ = _078_;
        _062_ = 1'h0;
      end else begin
      end
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.wait_for_sync  <= _062_;
      \stage_16.iaddr  <= _050_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _035_ = _065_;
    _036_ = _066_;
    _037_ = _067_;
    if (_084_) begin
      _065_ = \stage_16.iaddr [2:0];
      _066_ = \stage_16.i_data ;
      _067_ = 32'd4294967295;
    end else begin
      _065_ = 3'hx;
      _066_ = 32'hxxxxxxxx;
      _067_ = 32'd0;
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      _104_ <= _035_;
      _105_ <= _036_;
      _106_ <= _037_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _054_ = \stage_16.ib_sync ;
    if (\stage_16.i_reset ) begin
      _054_ = 1'h0;
    end else begin
      if (\stage_16.i_ce ) begin
        _054_ = _081_;
      end else begin
      end
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.ib_sync  <= _054_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _051_ = \stage_16.ib_a ;
    _052_ = \stage_16.ib_b ;
    _053_ = \stage_16.ib_c ;
    _033_ = _063_;
    _034_ = _064_;
    if (\stage_16.i_ce ) begin
      _051_ = _102_;
      _052_ = \stage_16.i_data ;
      _063_ = \stage_16.iaddr [2:0];
      _064_ = _077_;
      _053_ = _077_;
      casez (\stage_16.iaddr [2:0])
        3'h0:
            _077_ = \stage_16.cmem[0] ;
        3'h1:
            _077_ = \stage_16.cmem[1] ;
        3'h2:
            _077_ = \stage_16.cmem[2] ;
        3'h3:
            _077_ = \stage_16.cmem[3] ;
        3'h4:
            _077_ = \stage_16.cmem[4] ;
        3'h5:
            _077_ = \stage_16.cmem[5] ;
        3'h6:
            _077_ = \stage_16.cmem[6] ;
        3'h7:
            _077_ = \stage_16.cmem[7] ;
        default:
            _077_ = 40'hxxxxxxxxxx;
      endcase
    end else begin
      _063_ = _100_;
      _064_ = _101_;
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.ib_a  <= _051_;
      \stage_16.ib_b  <= _052_;
      \stage_16.ib_c  <= _053_;
      _100_ <= 3'hx;
      _101_ <= 40'hxxxxxxxxxx;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _059_ = \stage_16.o_sync ;
    _041_ = \stage_16.b_started ;
    _060_ = \stage_16.oaddr ;
    if (\stage_16.i_reset ) begin
      _060_ = 4'h0;
      _059_ = 1'h0;
      _041_ = 1'h0;
    end else begin
      if (\stage_16.i_ce ) begin
        _059_ = _113_;
        if (_099_) begin
          _060_ = _079_;
        end else begin
        end
        if (_086_) begin
          _041_ = 1'h1;
        end else begin
        end
      end else begin
      end
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.o_sync  <= _059_;
      \stage_16.b_started  <= _041_;
      \stage_16.oaddr  <= _060_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _056_ = \stage_16.nxt_oaddr [0];
    if (\stage_16.i_ce ) begin
      _056_ = \stage_16.oaddr [0];
    end else begin
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.nxt_oaddr [0] <= _056_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _057_ = \stage_16.nxt_oaddr [2:1];
    if (\stage_16.i_ce ) begin
      _057_ = _080_;
    end else begin
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.nxt_oaddr [2:1] <= _057_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _038_ = _068_;
    _039_ = _069_;
    _040_ = _070_;
    if (_087_) begin
      _068_ = \stage_16.oaddr [2:0];
      _069_ = \stage_16.ob_b ;
      _070_ = 32'd4294967295;
    end else begin
      _068_ = 3'hx;
      _069_ = 32'hxxxxxxxx;
      _070_ = 32'd0;
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      _107_ <= _038_;
      _108_ <= _039_;
      _109_ <= _040_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _061_ = \stage_16.pre_ovalue ;
    if (\stage_16.i_ce ) begin
      _061_ = _103_;
    end else begin
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.pre_ovalue  <= _061_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _058_ = \stage_16.o_data ;
    if (\stage_16.i_ce ) begin
      _058_ = _114_;
    end else begin
    end
  end
  always @(posedge \stage_16.i_clk ) begin
      \stage_16.o_data  <= _058_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _145_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.HWBFLY.bfly.r_aux  <= _145_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _146_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.HWBFLY.bfly.r_aux_2  <= _146_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _142_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_16.HWBFLY.bfly.leftv  <= _142_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _143_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_16.HWBFLY.bfly.leftvv  <= _143_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _141_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_16.HWBFLY.bfly.left_saved  <= _141_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _144_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_16.HWBFLY.bfly.o_aux  <= _144_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _132_ = \stage_16.HWBFLY.bfly.r_aux ;
    _133_ = \stage_16.HWBFLY.bfly.r_aux_2 ;
    if (\stage_16.HWBFLY.bfly.i_reset ) begin
      _132_ = 1'h0;
      _133_ = 1'h0;
    end else begin
      if (\stage_16.HWBFLY.bfly.i_ce ) begin
        _132_ = \stage_16.HWBFLY.bfly.i_aux ;
        _133_ = \stage_16.HWBFLY.bfly.r_aux ;
      end else begin
      end
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.r_aux  <= _132_;
      \stage_16.HWBFLY.bfly.r_aux_2  <= _133_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _137_ = \stage_16.HWBFLY.bfly.r_left ;
    _138_ = \stage_16.HWBFLY.bfly.r_right ;
    _134_ = \stage_16.HWBFLY.bfly.r_coef ;
    _125_ = \stage_16.HWBFLY.bfly.ir_coef_r ;
    _124_ = \stage_16.HWBFLY.bfly.ir_coef_i ;
    _140_ = \stage_16.HWBFLY.bfly.r_sum_r ;
    _139_ = \stage_16.HWBFLY.bfly.r_sum_i ;
    _136_ = \stage_16.HWBFLY.bfly.r_dif_r ;
    _135_ = \stage_16.HWBFLY.bfly.r_dif_i ;
    if (\stage_16.HWBFLY.bfly.i_ce ) begin
      _137_ = \stage_16.HWBFLY.bfly.i_left ;
      _138_ = \stage_16.HWBFLY.bfly.i_right ;
      _134_ = \stage_16.HWBFLY.bfly.i_coef ;
      _140_ = _147_;
      _139_ = _148_;
      _136_ = _154_;
      _135_ = _155_;
      _125_ = \stage_16.HWBFLY.bfly.r_coef [39:20];
      _124_ = \stage_16.HWBFLY.bfly.r_coef [19:0];
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.r_left  <= _137_;
      \stage_16.HWBFLY.bfly.r_right  <= _138_;
      \stage_16.HWBFLY.bfly.r_coef  <= _134_;
      \stage_16.HWBFLY.bfly.ir_coef_r  <= _125_;
      \stage_16.HWBFLY.bfly.ir_coef_i  <= _124_;
      \stage_16.HWBFLY.bfly.r_sum_r  <= _140_;
      \stage_16.HWBFLY.bfly.r_sum_i  <= _139_;
      \stage_16.HWBFLY.bfly.r_dif_r  <= _136_;
      \stage_16.HWBFLY.bfly.r_dif_i  <= _135_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _127_ = \stage_16.HWBFLY.bfly.leftv ;
    _128_ = \stage_16.HWBFLY.bfly.leftvv ;
    if (\stage_16.HWBFLY.bfly.i_reset ) begin
      _127_ = 35'h000000000;
      _128_ = 35'h000000000;
    end else begin
      if (\stage_16.HWBFLY.bfly.i_ce ) begin
        _127_ = { \stage_16.HWBFLY.bfly.r_aux_2 , \stage_16.HWBFLY.bfly.r_sum_r , \stage_16.HWBFLY.bfly.r_sum_i  };
        _128_ = \stage_16.HWBFLY.bfly.leftv ;
      end else begin
      end
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.leftv  <= _127_;
      \stage_16.HWBFLY.bfly.leftvv  <= _128_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _115_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
    _117_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
    _116_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
    _118_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
    _119_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
    _120_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
    if (\stage_16.HWBFLY.bfly.i_ce ) begin
      _115_ = \stage_16.HWBFLY.bfly.ir_coef_r ;
      _117_ = \stage_16.HWBFLY.bfly.ir_coef_i ;
      _116_ = \stage_16.HWBFLY.bfly.r_dif_r ;
      _118_ = \stage_16.HWBFLY.bfly.r_dif_i ;
      _119_ = _149_;
      _120_ = _150_;
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.CKPCE_ONE.p1c_in  <= _115_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.p2c_in  <= _117_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.p1d_in  <= _116_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.p2d_in  <= _118_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.p3c_in  <= _119_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.p3d_in  <= _120_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _121_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_one ;
    _123_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_two ;
    _122_ = \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_three ;
    if (\stage_16.HWBFLY.bfly.i_ce ) begin
      _121_ = _151_;
      _123_ = _152_;
      _122_ = _153_;
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_one  <= _121_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_two  <= _123_;
      \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_three  <= _122_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _131_ = \stage_16.HWBFLY.bfly.o_aux ;
    _126_ = \stage_16.HWBFLY.bfly.left_saved ;
    if (\stage_16.HWBFLY.bfly.i_reset ) begin
      _126_ = 35'h000000000;
      _131_ = 1'h0;
    end else begin
      if (\stage_16.HWBFLY.bfly.i_ce ) begin
        _126_ = \stage_16.HWBFLY.bfly.leftvv ;
        _131_ = \stage_16.HWBFLY.bfly.aux_s ;
      end else begin
      end
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.o_aux  <= _131_;
      \stage_16.HWBFLY.bfly.left_saved  <= _126_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _130_ = \stage_16.HWBFLY.bfly.mpy_r ;
    _129_ = \stage_16.HWBFLY.bfly.mpy_i ;
    if (\stage_16.HWBFLY.bfly.i_ce ) begin
      _130_ = _156_;
      _129_ = _158_;
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.i_clk ) begin
      \stage_16.HWBFLY.bfly.mpy_r  <= _130_;
      \stage_16.HWBFLY.bfly.mpy_i  <= _129_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _159_ = \stage_16.HWBFLY.bfly.do_rnd_left_i.o_val ;
    if (\stage_16.HWBFLY.bfly.do_rnd_left_i.i_ce ) begin
      if (_161_) begin
        _159_ = \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_162_) begin
          _159_ = \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _159_ = \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _159_ = \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.do_rnd_left_i.i_clk ) begin
      \stage_16.HWBFLY.bfly.do_rnd_left_i.o_val  <= _159_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _163_ = \stage_16.HWBFLY.bfly.do_rnd_left_r.o_val ;
    if (\stage_16.HWBFLY.bfly.do_rnd_left_r.i_ce ) begin
      if (_165_) begin
        _163_ = \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_166_) begin
          _163_ = \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _163_ = \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _163_ = \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.do_rnd_left_r.i_clk ) begin
      \stage_16.HWBFLY.bfly.do_rnd_left_r.o_val  <= _163_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _167_ = \stage_16.HWBFLY.bfly.do_rnd_right_i.o_val ;
    if (\stage_16.HWBFLY.bfly.do_rnd_right_i.i_ce ) begin
      if (_169_) begin
        _167_ = \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_170_) begin
          _167_ = \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _167_ = \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _167_ = \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.do_rnd_right_i.i_clk ) begin
      \stage_16.HWBFLY.bfly.do_rnd_right_i.o_val  <= _167_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _171_ = \stage_16.HWBFLY.bfly.do_rnd_right_r.o_val ;
    if (\stage_16.HWBFLY.bfly.do_rnd_right_r.i_ce ) begin
      if (_173_) begin
        _171_ = \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_174_) begin
          _171_ = \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _171_ = \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _171_ = \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_16.HWBFLY.bfly.do_rnd_right_r.i_clk ) begin
      \stage_16.HWBFLY.bfly.do_rnd_right_r.o_val  <= _171_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _188_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \stage_2.wait_for_sync  <= _188_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _186_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_2.stage  <= _186_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _187_ = 2'h0;
  end
  always @* begin
  end
  initial begin
      \stage_2.sync_pipe  <= _187_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _185_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_2.o_sync  <= _185_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _184_ = \stage_2.wait_for_sync ;
    _180_ = \stage_2.stage ;
    if (\stage_2.i_reset ) begin
      _184_ = 1'h1;
      _180_ = 1'h0;
    end else begin
      if (_192_) begin
        _184_ = 1'h0;
        _180_ = 1'h1;
      end else begin
        if (\stage_2.i_ce ) begin
          _180_ = 1'h0;
        end else begin
        end
      end
    end
  end
  always @(posedge \stage_2.i_clk ) begin
      \stage_2.wait_for_sync  <= _184_;
      \stage_2.stage  <= _180_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _183_ = \stage_2.sync_pipe ;
    if (\stage_2.i_reset ) begin
      _183_ = 2'h0;
    end else begin
      if (\stage_2.i_ce ) begin
        _183_ = { \stage_2.sync_pipe [0], \stage_2.i_sync  };
      end else begin
      end
    end
  end
  always @(posedge \stage_2.i_clk ) begin
      \stage_2.sync_pipe  <= _183_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _177_ = \stage_2.o_sync ;
    if (\stage_2.i_reset ) begin
      _177_ = 1'h0;
    end else begin
      if (\stage_2.i_ce ) begin
        _177_ = \stage_2.sync_pipe [1];
      end else begin
      end
    end
  end
  always @(posedge \stage_2.i_clk ) begin
      \stage_2.o_sync  <= _177_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _176_ = \stage_2.m_r ;
    _175_ = \stage_2.m_i ;
    _179_ = \stage_2.rnd_r ;
    _178_ = \stage_2.rnd_i ;
    _182_ = \stage_2.sto_r ;
    _181_ = \stage_2.sto_i ;
    if (\stage_2.i_ce ) begin
      if (_195_) begin
        _176_ = \stage_2.i_r ;
        _175_ = \stage_2.i_i ;
        _179_ = \stage_2.sto_r ;
        _178_ = \stage_2.sto_i ;
      end else begin
        _179_ = _189_;
        _178_ = _190_;
        _182_ = _197_;
        _181_ = _198_;
      end
    end else begin
    end
  end
  always @(posedge \stage_2.i_clk ) begin
      \stage_2.m_r  <= _176_;
      \stage_2.m_i  <= _175_;
      \stage_2.rnd_r  <= _179_;
      \stage_2.rnd_i  <= _178_;
      \stage_2.sto_r  <= _182_;
      \stage_2.sto_i  <= _181_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _199_ = \stage_2.do_rnd_i.o_val ;
    if (\stage_2.do_rnd_i.i_ce ) begin
      _199_ = \stage_2.do_rnd_i.i_val [15:0];
    end else begin
    end
  end
  always @(posedge \stage_2.do_rnd_i.i_clk ) begin
      \stage_2.do_rnd_i.o_val  <= _199_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _200_ = \stage_2.do_rnd_r.o_val ;
    if (\stage_2.do_rnd_r.i_ce ) begin
      _200_ = \stage_2.do_rnd_r.i_val [15:0];
    end else begin
    end
  end
  always @(posedge \stage_2.do_rnd_r.i_clk ) begin
      \stage_2.do_rnd_r.o_val  <= _200_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _210_ = 40'h4000000000;
    _217_ = 40'h3ec530c7c6;
    _218_ = 40'h3b20d187de;
    _219_ = 40'h3536d238e7;
    _220_ = 40'h2d4142d414;
    _221_ = 40'h238e73536d;
    _222_ = 40'h187de3b20d;
    _223_ = 40'h0c7c63ec53;
    _224_ = 40'h0000040000;
    _225_ = 40'hf383a3ec53;
    _211_ = 40'he78223b20d;
    _212_ = 40'hdc7193536d;
    _213_ = 40'hd2bec2d414;
    _214_ = 40'hcac93238e7;
    _215_ = 40'hc4df3187de;
    _216_ = 40'hc13ad0c7c6;
  end
  always @* begin
      \stage_32.cmem[0]  <= _210_;
      \stage_32.cmem[1]  <= _217_;
      \stage_32.cmem[2]  <= _218_;
      \stage_32.cmem[3]  <= _219_;
      \stage_32.cmem[4]  <= _220_;
      \stage_32.cmem[5]  <= _221_;
      \stage_32.cmem[6]  <= _222_;
      \stage_32.cmem[7]  <= _223_;
      \stage_32.cmem[8]  <= _224_;
      \stage_32.cmem[9]  <= _225_;
      \stage_32.cmem[10]  <= _211_;
      \stage_32.cmem[11]  <= _212_;
      \stage_32.cmem[12]  <= _213_;
      \stage_32.cmem[13]  <= _214_;
      \stage_32.cmem[14]  <= _215_;
      \stage_32.cmem[15]  <= _216_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _252_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \stage_32.wait_for_sync  <= _252_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _248_ = 5'h00;
  end
  always @* begin
  end
  initial begin
      \stage_32.iaddr  <= _248_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _249_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_32.ib_sync  <= _249_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _251_ = 5'h00;
  end
  always @* begin
  end
  initial begin
      \stage_32.oaddr  <= _251_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _250_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_32.o_sync  <= _250_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _247_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_32.b_started  <= _247_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _231_ = 1'h0;
  end
  always @* begin
      \stage_32.idle  <= _231_;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _238_ = \stage_32.wait_for_sync ;
    _226_ = \stage_32.iaddr ;
    if (\stage_32.i_reset ) begin
      _238_ = 1'h1;
      _226_ = 5'h00;
    end else begin
      if (_259_) begin
        _226_ = _254_;
        _238_ = 1'h0;
      end else begin
      end
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.wait_for_sync  <= _238_;
      \stage_32.iaddr  <= _226_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _203_ = _241_;
    _204_ = _242_;
    _205_ = _243_;
    if (_260_) begin
      _241_ = \stage_32.iaddr [3:0];
      _242_ = \stage_32.i_data ;
      _243_ = 32'd4294967295;
    end else begin
      _241_ = 4'hx;
      _242_ = 32'hxxxxxxxx;
      _243_ = 32'd0;
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      _280_ <= _203_;
      _281_ <= _204_;
      _282_ <= _205_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _230_ = \stage_32.ib_sync ;
    if (\stage_32.i_reset ) begin
      _230_ = 1'h0;
    end else begin
      if (\stage_32.i_ce ) begin
        _230_ = _257_;
      end else begin
      end
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.ib_sync  <= _230_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _227_ = \stage_32.ib_a ;
    _228_ = \stage_32.ib_b ;
    _229_ = \stage_32.ib_c ;
    _201_ = _239_;
    _202_ = _240_;
    if (\stage_32.i_ce ) begin
      _227_ = _278_;
      _228_ = \stage_32.i_data ;
      _239_ = \stage_32.iaddr [3:0];
      _240_ = _253_;
      _229_ = _253_;
      casez (\stage_32.iaddr [3:0])
        4'h0:
            _253_ = \stage_32.cmem[0] ;
        4'h1:
            _253_ = \stage_32.cmem[1] ;
        4'h2:
            _253_ = \stage_32.cmem[2] ;
        4'h3:
            _253_ = \stage_32.cmem[3] ;
        4'h4:
            _253_ = \stage_32.cmem[4] ;
        4'h5:
            _253_ = \stage_32.cmem[5] ;
        4'h6:
            _253_ = \stage_32.cmem[6] ;
        4'h7:
            _253_ = \stage_32.cmem[7] ;
        4'h8:
            _253_ = \stage_32.cmem[8] ;
        4'h9:
            _253_ = \stage_32.cmem[9] ;
        4'ha:
            _253_ = \stage_32.cmem[10] ;
        4'hb:
            _253_ = \stage_32.cmem[11] ;
        4'hc:
            _253_ = \stage_32.cmem[12] ;
        4'hd:
            _253_ = \stage_32.cmem[13] ;
        4'he:
            _253_ = \stage_32.cmem[14] ;
        4'hf:
            _253_ = \stage_32.cmem[15] ;
        default:
            _253_ = 40'hxxxxxxxxxx;
      endcase
    end else begin
      _239_ = _276_;
      _240_ = _277_;
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.ib_a  <= _227_;
      \stage_32.ib_b  <= _228_;
      \stage_32.ib_c  <= _229_;
      _276_ <= 4'hx;
      _277_ <= 40'hxxxxxxxxxx;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _235_ = \stage_32.o_sync ;
    _209_ = \stage_32.b_started ;
    _236_ = \stage_32.oaddr ;
    if (\stage_32.i_reset ) begin
      _236_ = 5'h00;
      _235_ = 1'h0;
      _209_ = 1'h0;
    end else begin
      if (\stage_32.i_ce ) begin
        _235_ = _289_;
        if (_275_) begin
          _236_ = _255_;
        end else begin
        end
        if (_262_) begin
          _209_ = 1'h1;
        end else begin
        end
      end else begin
      end
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.o_sync  <= _235_;
      \stage_32.b_started  <= _209_;
      \stage_32.oaddr  <= _236_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _232_ = \stage_32.nxt_oaddr [0];
    if (\stage_32.i_ce ) begin
      _232_ = \stage_32.oaddr [0];
    end else begin
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.nxt_oaddr [0] <= _232_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _233_ = \stage_32.nxt_oaddr [3:1];
    if (\stage_32.i_ce ) begin
      _233_ = _256_;
    end else begin
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.nxt_oaddr [3:1] <= _233_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _206_ = _244_;
    _207_ = _245_;
    _208_ = _246_;
    if (_263_) begin
      _244_ = \stage_32.oaddr [3:0];
      _245_ = \stage_32.ob_b ;
      _246_ = 32'd4294967295;
    end else begin
      _244_ = 4'hx;
      _245_ = 32'hxxxxxxxx;
      _246_ = 32'd0;
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      _283_ <= _206_;
      _284_ <= _207_;
      _285_ <= _208_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _237_ = \stage_32.pre_ovalue ;
    if (\stage_32.i_ce ) begin
      _237_ = _279_;
    end else begin
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.pre_ovalue  <= _237_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _234_ = \stage_32.o_data ;
    if (\stage_32.i_ce ) begin
      _234_ = _290_;
    end else begin
    end
  end
  always @(posedge \stage_32.i_clk ) begin
      \stage_32.o_data  <= _234_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _321_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_32.HWBFLY.bfly.r_aux  <= _321_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _322_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_32.HWBFLY.bfly.r_aux_2  <= _322_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _318_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_32.HWBFLY.bfly.leftv  <= _318_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _319_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_32.HWBFLY.bfly.leftvv  <= _319_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _317_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_32.HWBFLY.bfly.left_saved  <= _317_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _320_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_32.HWBFLY.bfly.o_aux  <= _320_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _308_ = \stage_32.HWBFLY.bfly.r_aux ;
    _309_ = \stage_32.HWBFLY.bfly.r_aux_2 ;
    if (\stage_32.HWBFLY.bfly.i_reset ) begin
      _308_ = 1'h0;
      _309_ = 1'h0;
    end else begin
      if (\stage_32.HWBFLY.bfly.i_ce ) begin
        _308_ = \stage_32.HWBFLY.bfly.i_aux ;
        _309_ = \stage_32.HWBFLY.bfly.r_aux ;
      end else begin
      end
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.r_aux  <= _308_;
      \stage_32.HWBFLY.bfly.r_aux_2  <= _309_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _313_ = \stage_32.HWBFLY.bfly.r_left ;
    _314_ = \stage_32.HWBFLY.bfly.r_right ;
    _310_ = \stage_32.HWBFLY.bfly.r_coef ;
    _301_ = \stage_32.HWBFLY.bfly.ir_coef_r ;
    _300_ = \stage_32.HWBFLY.bfly.ir_coef_i ;
    _316_ = \stage_32.HWBFLY.bfly.r_sum_r ;
    _315_ = \stage_32.HWBFLY.bfly.r_sum_i ;
    _312_ = \stage_32.HWBFLY.bfly.r_dif_r ;
    _311_ = \stage_32.HWBFLY.bfly.r_dif_i ;
    if (\stage_32.HWBFLY.bfly.i_ce ) begin
      _313_ = \stage_32.HWBFLY.bfly.i_left ;
      _314_ = \stage_32.HWBFLY.bfly.i_right ;
      _310_ = \stage_32.HWBFLY.bfly.i_coef ;
      _316_ = _323_;
      _315_ = _324_;
      _312_ = _330_;
      _311_ = _331_;
      _301_ = \stage_32.HWBFLY.bfly.r_coef [39:20];
      _300_ = \stage_32.HWBFLY.bfly.r_coef [19:0];
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.r_left  <= _313_;
      \stage_32.HWBFLY.bfly.r_right  <= _314_;
      \stage_32.HWBFLY.bfly.r_coef  <= _310_;
      \stage_32.HWBFLY.bfly.ir_coef_r  <= _301_;
      \stage_32.HWBFLY.bfly.ir_coef_i  <= _300_;
      \stage_32.HWBFLY.bfly.r_sum_r  <= _316_;
      \stage_32.HWBFLY.bfly.r_sum_i  <= _315_;
      \stage_32.HWBFLY.bfly.r_dif_r  <= _312_;
      \stage_32.HWBFLY.bfly.r_dif_i  <= _311_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _303_ = \stage_32.HWBFLY.bfly.leftv ;
    _304_ = \stage_32.HWBFLY.bfly.leftvv ;
    if (\stage_32.HWBFLY.bfly.i_reset ) begin
      _303_ = 35'h000000000;
      _304_ = 35'h000000000;
    end else begin
      if (\stage_32.HWBFLY.bfly.i_ce ) begin
        _303_ = { \stage_32.HWBFLY.bfly.r_aux_2 , \stage_32.HWBFLY.bfly.r_sum_r , \stage_32.HWBFLY.bfly.r_sum_i  };
        _304_ = \stage_32.HWBFLY.bfly.leftv ;
      end else begin
      end
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.leftv  <= _303_;
      \stage_32.HWBFLY.bfly.leftvv  <= _304_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _291_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
    _293_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
    _292_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
    _294_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
    _295_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
    _296_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
    if (\stage_32.HWBFLY.bfly.i_ce ) begin
      _291_ = \stage_32.HWBFLY.bfly.ir_coef_r ;
      _293_ = \stage_32.HWBFLY.bfly.ir_coef_i ;
      _292_ = \stage_32.HWBFLY.bfly.r_dif_r ;
      _294_ = \stage_32.HWBFLY.bfly.r_dif_i ;
      _295_ = _325_;
      _296_ = _326_;
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.CKPCE_ONE.p1c_in  <= _291_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.p2c_in  <= _293_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.p1d_in  <= _292_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.p2d_in  <= _294_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.p3c_in  <= _295_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.p3d_in  <= _296_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _297_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_one ;
    _299_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_two ;
    _298_ = \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_three ;
    if (\stage_32.HWBFLY.bfly.i_ce ) begin
      _297_ = _327_;
      _299_ = _328_;
      _298_ = _329_;
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_one  <= _297_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_two  <= _299_;
      \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_three  <= _298_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _307_ = \stage_32.HWBFLY.bfly.o_aux ;
    _302_ = \stage_32.HWBFLY.bfly.left_saved ;
    if (\stage_32.HWBFLY.bfly.i_reset ) begin
      _302_ = 35'h000000000;
      _307_ = 1'h0;
    end else begin
      if (\stage_32.HWBFLY.bfly.i_ce ) begin
        _302_ = \stage_32.HWBFLY.bfly.leftvv ;
        _307_ = \stage_32.HWBFLY.bfly.aux_s ;
      end else begin
      end
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.o_aux  <= _307_;
      \stage_32.HWBFLY.bfly.left_saved  <= _302_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _306_ = \stage_32.HWBFLY.bfly.mpy_r ;
    _305_ = \stage_32.HWBFLY.bfly.mpy_i ;
    if (\stage_32.HWBFLY.bfly.i_ce ) begin
      _306_ = _332_;
      _305_ = _334_;
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.i_clk ) begin
      \stage_32.HWBFLY.bfly.mpy_r  <= _306_;
      \stage_32.HWBFLY.bfly.mpy_i  <= _305_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _335_ = \stage_32.HWBFLY.bfly.do_rnd_left_i.o_val ;
    if (\stage_32.HWBFLY.bfly.do_rnd_left_i.i_ce ) begin
      if (_337_) begin
        _335_ = \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_338_) begin
          _335_ = \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _335_ = \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _335_ = \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.do_rnd_left_i.i_clk ) begin
      \stage_32.HWBFLY.bfly.do_rnd_left_i.o_val  <= _335_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _339_ = \stage_32.HWBFLY.bfly.do_rnd_left_r.o_val ;
    if (\stage_32.HWBFLY.bfly.do_rnd_left_r.i_ce ) begin
      if (_341_) begin
        _339_ = \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_342_) begin
          _339_ = \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _339_ = \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _339_ = \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.do_rnd_left_r.i_clk ) begin
      \stage_32.HWBFLY.bfly.do_rnd_left_r.o_val  <= _339_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _343_ = \stage_32.HWBFLY.bfly.do_rnd_right_i.o_val ;
    if (\stage_32.HWBFLY.bfly.do_rnd_right_i.i_ce ) begin
      if (_345_) begin
        _343_ = \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_346_) begin
          _343_ = \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _343_ = \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _343_ = \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.do_rnd_right_i.i_clk ) begin
      \stage_32.HWBFLY.bfly.do_rnd_right_i.o_val  <= _343_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _347_ = \stage_32.HWBFLY.bfly.do_rnd_right_r.o_val ;
    if (\stage_32.HWBFLY.bfly.do_rnd_right_r.i_ce ) begin
      if (_349_) begin
        _347_ = \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_350_) begin
          _347_ = \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _347_ = \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _347_ = \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_32.HWBFLY.bfly.do_rnd_right_r.i_clk ) begin
      \stage_32.HWBFLY.bfly.do_rnd_right_r.o_val  <= _347_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _370_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \stage_4.wait_for_sync  <= _370_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _367_ = 6'h00;
  end
  always @* begin
  end
  initial begin
      \stage_4.iaddr  <= _367_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _369_ = 3'h0;
  end
  always @* begin
  end
  initial begin
      \stage_4.pipeline  <= _369_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _368_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_4.o_sync  <= _368_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _366_ = \stage_4.wait_for_sync ;
    _353_ = \stage_4.iaddr ;
    if (\stage_4.i_reset ) begin
      _366_ = 1'h1;
      _353_ = 6'h00;
    end else begin
      if (_375_) begin
        _353_ = _371_;
        _366_ = 1'h0;
      end else begin
      end
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.wait_for_sync  <= _366_;
      \stage_4.iaddr  <= _353_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _354_ = \stage_4.imem[0] ;
    _355_ = \stage_4.imem[1] ;
    if (\stage_4.i_ce ) begin
      _354_ = \stage_4.i_data ;
      _355_ = \stage_4.imem[0] ;
    end else begin
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.imem[0]  <= _354_;
      \stage_4.imem[1]  <= _355_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _363_ = \stage_4.pipeline ;
    if (\stage_4.i_reset ) begin
      _363_ = 3'h0;
    end else begin
      if (\stage_4.i_ce ) begin
        _363_ = { \stage_4.pipeline [1:0], \stage_4.iaddr [1] };
      end else begin
      end
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.pipeline  <= _363_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _365_ = \stage_4.sum_r ;
    _364_ = \stage_4.sum_i ;
    _352_ = \stage_4.diff_r ;
    _351_ = \stage_4.diff_i ;
    if (_376_) begin
      _365_ = _372_;
      _364_ = _373_;
      _352_ = _382_;
      _351_ = _383_;
    end else begin
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.sum_r  <= _365_;
      \stage_4.sum_i  <= _364_;
      \stage_4.diff_r  <= _352_;
      \stage_4.diff_i  <= _351_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _358_ = \stage_4.ob_a ;
    _360_ = \stage_4.ob_b_r ;
    _359_ = \stage_4.ob_b_i ;
    if (\stage_4.i_ce ) begin
      _358_ = { \stage_4.rnd_sum_r , \stage_4.rnd_sum_i  };
      if (_378_) begin
        _360_ = \stage_4.rnd_diff_r ;
        _359_ = \stage_4.rnd_diff_i ;
      end else begin
                  _360_ = \stage_4.n_rnd_diff_i ;
          _359_ = \stage_4.rnd_diff_r ;
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.ob_a  <= _358_;
      \stage_4.ob_b_r  <= _360_;
      \stage_4.ob_b_i  <= _359_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _356_ = \stage_4.o_data ;
    _361_ = \stage_4.omem[0] ;
    _362_ = \stage_4.omem[1] ;
    if (\stage_4.i_ce ) begin
      _361_ = \stage_4.ob_b ;
      _362_ = \stage_4.omem[0] ;
      if (\stage_4.pipeline [2]) begin
        _356_ = \stage_4.ob_a ;
      end else begin
        _356_ = \stage_4.omem[1] ;
      end
    end else begin
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.o_data  <= _356_;
      \stage_4.omem[0]  <= _361_;
      \stage_4.omem[1]  <= _362_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _357_ = \stage_4.o_sync ;
    if (\stage_4.i_reset ) begin
      _357_ = 1'h0;
    end else begin
      if (\stage_4.i_ce ) begin
        _357_ = _374_;
      end else begin
      end
    end
  end
  always @(posedge \stage_4.i_clk ) begin
      \stage_4.o_sync  <= _357_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _384_ = \stage_4.do_rnd_diff_i.o_val ;
    if (\stage_4.do_rnd_diff_i.i_ce ) begin
      if (_386_) begin
        _384_ = \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (\stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
          _384_ = \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          _384_ = \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_4.do_rnd_diff_i.i_clk ) begin
      \stage_4.do_rnd_diff_i.o_val  <= _384_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _387_ = \stage_4.do_rnd_diff_r.o_val ;
    if (\stage_4.do_rnd_diff_r.i_ce ) begin
      if (_389_) begin
        _387_ = \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (\stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
          _387_ = \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          _387_ = \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_4.do_rnd_diff_r.i_clk ) begin
      \stage_4.do_rnd_diff_r.o_val  <= _387_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _390_ = \stage_4.do_rnd_sum_i.o_val ;
    if (\stage_4.do_rnd_sum_i.i_ce ) begin
      if (_392_) begin
        _390_ = \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (\stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
          _390_ = \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          _390_ = \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_4.do_rnd_sum_i.i_clk ) begin
      \stage_4.do_rnd_sum_i.o_val  <= _390_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _393_ = \stage_4.do_rnd_sum_r.o_val ;
    if (\stage_4.do_rnd_sum_r.i_ce ) begin
      if (_395_) begin
        _393_ = \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (\stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
          _393_ = \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          _393_ = \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_4.do_rnd_sum_r.i_clk ) begin
      \stage_4.do_rnd_sum_r.o_val  <= _393_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _405_ = 40'h4000000000;
    _416_ = 40'h3fb120645f;
    _427_ = 40'h3ec530c7c6;
    _430_ = 40'h3d3e812940;
    _431_ = 40'h3b20d187de;
    _432_ = 40'h387161e2b6;
    _433_ = 40'h3536d238e7;
    _434_ = 40'h317902899e;
    _435_ = 40'h2d4142d414;
    _436_ = 40'h2899e31790;
    _406_ = 40'h238e73536d;
    _407_ = 40'h1e2b638716;
    _408_ = 40'h187de3b20d;
    _409_ = 40'h129403d3e8;
    _410_ = 40'h0c7c63ec53;
    _411_ = 40'h0645f3fb12;
    _412_ = 40'h0000040000;
    _413_ = 40'hf9ba13fb12;
    _414_ = 40'hf383a3ec53;
    _415_ = 40'hed6c03d3e8;
    _417_ = 40'he78223b20d;
    _418_ = 40'he1d4a38716;
    _419_ = 40'hdc7193536d;
    _420_ = 40'hd766231790;
    _421_ = 40'hd2bec2d414;
    _422_ = 40'hce8702899e;
    _423_ = 40'hcac93238e7;
    _424_ = 40'hc78ea1e2b6;
    _425_ = 40'hc4df3187de;
    _426_ = 40'hc2c1812940;
    _428_ = 40'hc13ad0c7c6;
    _429_ = 40'hc04ee0645f;
  end
  always @* begin
      \stage_64.cmem[0]  <= _405_;
      \stage_64.cmem[1]  <= _416_;
      \stage_64.cmem[2]  <= _427_;
      \stage_64.cmem[3]  <= _430_;
      \stage_64.cmem[4]  <= _431_;
      \stage_64.cmem[5]  <= _432_;
      \stage_64.cmem[6]  <= _433_;
      \stage_64.cmem[7]  <= _434_;
      \stage_64.cmem[8]  <= _435_;
      \stage_64.cmem[9]  <= _436_;
      \stage_64.cmem[10]  <= _406_;
      \stage_64.cmem[11]  <= _407_;
      \stage_64.cmem[12]  <= _408_;
      \stage_64.cmem[13]  <= _409_;
      \stage_64.cmem[14]  <= _410_;
      \stage_64.cmem[15]  <= _411_;
      \stage_64.cmem[16]  <= _412_;
      \stage_64.cmem[17]  <= _413_;
      \stage_64.cmem[18]  <= _414_;
      \stage_64.cmem[19]  <= _415_;
      \stage_64.cmem[20]  <= _417_;
      \stage_64.cmem[21]  <= _418_;
      \stage_64.cmem[22]  <= _419_;
      \stage_64.cmem[23]  <= _420_;
      \stage_64.cmem[24]  <= _421_;
      \stage_64.cmem[25]  <= _422_;
      \stage_64.cmem[26]  <= _423_;
      \stage_64.cmem[27]  <= _424_;
      \stage_64.cmem[28]  <= _425_;
      \stage_64.cmem[29]  <= _426_;
      \stage_64.cmem[30]  <= _428_;
      \stage_64.cmem[31]  <= _429_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _463_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \stage_64.wait_for_sync  <= _463_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _459_ = 6'h00;
  end
  always @* begin
  end
  initial begin
      \stage_64.iaddr  <= _459_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _460_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_64.ib_sync  <= _460_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _462_ = 6'h00;
  end
  always @* begin
  end
  initial begin
      \stage_64.oaddr  <= _462_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _461_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_64.o_sync  <= _461_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _458_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_64.b_started  <= _458_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _442_ = 1'h0;
  end
  always @* begin
      \stage_64.idle  <= _442_;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _449_ = \stage_64.wait_for_sync ;
    _437_ = \stage_64.iaddr ;
    if (\stage_64.i_reset ) begin
      _449_ = 1'h1;
      _437_ = 6'h00;
    end else begin
      if (_470_) begin
        _437_ = _465_;
        _449_ = 1'h0;
      end else begin
      end
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.wait_for_sync  <= _449_;
      \stage_64.iaddr  <= _437_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _398_ = _452_;
    _399_ = _453_;
    _400_ = _454_;
    if (_471_) begin
      _452_ = \stage_64.iaddr [4:0];
      _453_ = \stage_64.i_data ;
      _454_ = 32'd4294967295;
    end else begin
      _452_ = 5'hxx;
      _453_ = 32'hxxxxxxxx;
      _454_ = 32'd0;
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      _491_ <= _398_;
      _492_ <= _399_;
      _493_ <= _400_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _441_ = \stage_64.ib_sync ;
    if (\stage_64.i_reset ) begin
      _441_ = 1'h0;
    end else begin
      if (\stage_64.i_ce ) begin
        _441_ = _468_;
      end else begin
      end
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.ib_sync  <= _441_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _438_ = \stage_64.ib_a ;
    _439_ = \stage_64.ib_b ;
    _440_ = \stage_64.ib_c ;
    _396_ = _450_;
    _397_ = _451_;
    if (\stage_64.i_ce ) begin
      _438_ = _489_;
      _439_ = \stage_64.i_data ;
      _450_ = \stage_64.iaddr [4:0];
      _451_ = _464_;
      _440_ = _464_;
      casez (\stage_64.iaddr [4:0])
        5'h00:
            _464_ = \stage_64.cmem[0] ;
        5'h01:
            _464_ = \stage_64.cmem[1] ;
        5'h02:
            _464_ = \stage_64.cmem[2] ;
        5'h03:
            _464_ = \stage_64.cmem[3] ;
        5'h04:
            _464_ = \stage_64.cmem[4] ;
        5'h05:
            _464_ = \stage_64.cmem[5] ;
        5'h06:
            _464_ = \stage_64.cmem[6] ;
        5'h07:
            _464_ = \stage_64.cmem[7] ;
        5'h08:
            _464_ = \stage_64.cmem[8] ;
        5'h09:
            _464_ = \stage_64.cmem[9] ;
        5'h0a:
            _464_ = \stage_64.cmem[10] ;
        5'h0b:
            _464_ = \stage_64.cmem[11] ;
        5'h0c:
            _464_ = \stage_64.cmem[12] ;
        5'h0d:
            _464_ = \stage_64.cmem[13] ;
        5'h0e:
            _464_ = \stage_64.cmem[14] ;
        5'h0f:
            _464_ = \stage_64.cmem[15] ;
        5'h10:
            _464_ = \stage_64.cmem[16] ;
        5'h11:
            _464_ = \stage_64.cmem[17] ;
        5'h12:
            _464_ = \stage_64.cmem[18] ;
        5'h13:
            _464_ = \stage_64.cmem[19] ;
        5'h14:
            _464_ = \stage_64.cmem[20] ;
        5'h15:
            _464_ = \stage_64.cmem[21] ;
        5'h16:
            _464_ = \stage_64.cmem[22] ;
        5'h17:
            _464_ = \stage_64.cmem[23] ;
        5'h18:
            _464_ = \stage_64.cmem[24] ;
        5'h19:
            _464_ = \stage_64.cmem[25] ;
        5'h1a:
            _464_ = \stage_64.cmem[26] ;
        5'h1b:
            _464_ = \stage_64.cmem[27] ;
        5'h1c:
            _464_ = \stage_64.cmem[28] ;
        5'h1d:
            _464_ = \stage_64.cmem[29] ;
        5'h1e:
            _464_ = \stage_64.cmem[30] ;
        5'h1f:
            _464_ = \stage_64.cmem[31] ;
        default:
            _464_ = 40'hxxxxxxxxxx;
      endcase
    end else begin
      _450_ = _487_;
      _451_ = _488_;
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.ib_a  <= _438_;
      \stage_64.ib_b  <= _439_;
      \stage_64.ib_c  <= _440_;
      _487_ <= 5'hxx;
      _488_ <= 40'hxxxxxxxxxx;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _446_ = \stage_64.o_sync ;
    _404_ = \stage_64.b_started ;
    _447_ = \stage_64.oaddr ;
    if (\stage_64.i_reset ) begin
      _447_ = 6'h00;
      _446_ = 1'h0;
      _404_ = 1'h0;
    end else begin
      if (\stage_64.i_ce ) begin
        _446_ = _500_;
        if (_486_) begin
          _447_ = _466_;
        end else begin
        end
        if (_473_) begin
          _404_ = 1'h1;
        end else begin
        end
      end else begin
      end
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.o_sync  <= _446_;
      \stage_64.b_started  <= _404_;
      \stage_64.oaddr  <= _447_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _443_ = \stage_64.nxt_oaddr [0];
    if (\stage_64.i_ce ) begin
      _443_ = \stage_64.oaddr [0];
    end else begin
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.nxt_oaddr [0] <= _443_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _444_ = \stage_64.nxt_oaddr [4:1];
    if (\stage_64.i_ce ) begin
      _444_ = _467_;
    end else begin
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.nxt_oaddr [4:1] <= _444_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _401_ = _455_;
    _402_ = _456_;
    _403_ = _457_;
    if (_474_) begin
      _455_ = \stage_64.oaddr [4:0];
      _456_ = \stage_64.ob_b ;
      _457_ = 32'd4294967295;
    end else begin
      _455_ = 5'hxx;
      _456_ = 32'hxxxxxxxx;
      _457_ = 32'd0;
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      _494_ <= _401_;
      _495_ <= _402_;
      _496_ <= _403_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _448_ = \stage_64.pre_ovalue ;
    if (\stage_64.i_ce ) begin
      _448_ = _490_;
    end else begin
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.pre_ovalue  <= _448_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _445_ = \stage_64.o_data ;
    if (\stage_64.i_ce ) begin
      _445_ = _501_;
    end else begin
    end
  end
  always @(posedge \stage_64.i_clk ) begin
      \stage_64.o_data  <= _445_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _532_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_64.HWBFLY.bfly.r_aux  <= _532_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _533_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_64.HWBFLY.bfly.r_aux_2  <= _533_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _529_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_64.HWBFLY.bfly.leftv  <= _529_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _530_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_64.HWBFLY.bfly.leftvv  <= _530_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _528_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_64.HWBFLY.bfly.left_saved  <= _528_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _531_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_64.HWBFLY.bfly.o_aux  <= _531_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _519_ = \stage_64.HWBFLY.bfly.r_aux ;
    _520_ = \stage_64.HWBFLY.bfly.r_aux_2 ;
    if (\stage_64.HWBFLY.bfly.i_reset ) begin
      _519_ = 1'h0;
      _520_ = 1'h0;
    end else begin
      if (\stage_64.HWBFLY.bfly.i_ce ) begin
        _519_ = \stage_64.HWBFLY.bfly.i_aux ;
        _520_ = \stage_64.HWBFLY.bfly.r_aux ;
      end else begin
      end
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.r_aux  <= _519_;
      \stage_64.HWBFLY.bfly.r_aux_2  <= _520_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _524_ = \stage_64.HWBFLY.bfly.r_left ;
    _525_ = \stage_64.HWBFLY.bfly.r_right ;
    _521_ = \stage_64.HWBFLY.bfly.r_coef ;
    _512_ = \stage_64.HWBFLY.bfly.ir_coef_r ;
    _511_ = \stage_64.HWBFLY.bfly.ir_coef_i ;
    _527_ = \stage_64.HWBFLY.bfly.r_sum_r ;
    _526_ = \stage_64.HWBFLY.bfly.r_sum_i ;
    _523_ = \stage_64.HWBFLY.bfly.r_dif_r ;
    _522_ = \stage_64.HWBFLY.bfly.r_dif_i ;
    if (\stage_64.HWBFLY.bfly.i_ce ) begin
      _524_ = \stage_64.HWBFLY.bfly.i_left ;
      _525_ = \stage_64.HWBFLY.bfly.i_right ;
      _521_ = \stage_64.HWBFLY.bfly.i_coef ;
      _527_ = _534_;
      _526_ = _535_;
      _523_ = _541_;
      _522_ = _542_;
      _512_ = \stage_64.HWBFLY.bfly.r_coef [39:20];
      _511_ = \stage_64.HWBFLY.bfly.r_coef [19:0];
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.r_left  <= _524_;
      \stage_64.HWBFLY.bfly.r_right  <= _525_;
      \stage_64.HWBFLY.bfly.r_coef  <= _521_;
      \stage_64.HWBFLY.bfly.ir_coef_r  <= _512_;
      \stage_64.HWBFLY.bfly.ir_coef_i  <= _511_;
      \stage_64.HWBFLY.bfly.r_sum_r  <= _527_;
      \stage_64.HWBFLY.bfly.r_sum_i  <= _526_;
      \stage_64.HWBFLY.bfly.r_dif_r  <= _523_;
      \stage_64.HWBFLY.bfly.r_dif_i  <= _522_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _514_ = \stage_64.HWBFLY.bfly.leftv ;
    _515_ = \stage_64.HWBFLY.bfly.leftvv ;
    if (\stage_64.HWBFLY.bfly.i_reset ) begin
      _514_ = 35'h000000000;
      _515_ = 35'h000000000;
    end else begin
      if (\stage_64.HWBFLY.bfly.i_ce ) begin
        _514_ = { \stage_64.HWBFLY.bfly.r_aux_2 , \stage_64.HWBFLY.bfly.r_sum_r , \stage_64.HWBFLY.bfly.r_sum_i  };
        _515_ = \stage_64.HWBFLY.bfly.leftv ;
      end else begin
      end
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.leftv  <= _514_;
      \stage_64.HWBFLY.bfly.leftvv  <= _515_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _502_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
    _504_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
    _503_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
    _505_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
    _506_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
    _507_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
    if (\stage_64.HWBFLY.bfly.i_ce ) begin
      _502_ = \stage_64.HWBFLY.bfly.ir_coef_r ;
      _504_ = \stage_64.HWBFLY.bfly.ir_coef_i ;
      _503_ = \stage_64.HWBFLY.bfly.r_dif_r ;
      _505_ = \stage_64.HWBFLY.bfly.r_dif_i ;
      _506_ = _536_;
      _507_ = _537_;
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.CKPCE_ONE.p1c_in  <= _502_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.p2c_in  <= _504_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.p1d_in  <= _503_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.p2d_in  <= _505_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.p3c_in  <= _506_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.p3d_in  <= _507_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _508_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_one ;
    _510_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_two ;
    _509_ = \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_three ;
    if (\stage_64.HWBFLY.bfly.i_ce ) begin
      _508_ = _538_;
      _510_ = _539_;
      _509_ = _540_;
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_one  <= _508_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_two  <= _510_;
      \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_three  <= _509_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _518_ = \stage_64.HWBFLY.bfly.o_aux ;
    _513_ = \stage_64.HWBFLY.bfly.left_saved ;
    if (\stage_64.HWBFLY.bfly.i_reset ) begin
      _513_ = 35'h000000000;
      _518_ = 1'h0;
    end else begin
      if (\stage_64.HWBFLY.bfly.i_ce ) begin
        _513_ = \stage_64.HWBFLY.bfly.leftvv ;
        _518_ = \stage_64.HWBFLY.bfly.aux_s ;
      end else begin
      end
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.o_aux  <= _518_;
      \stage_64.HWBFLY.bfly.left_saved  <= _513_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _517_ = \stage_64.HWBFLY.bfly.mpy_r ;
    _516_ = \stage_64.HWBFLY.bfly.mpy_i ;
    if (\stage_64.HWBFLY.bfly.i_ce ) begin
      _517_ = _543_;
      _516_ = _545_;
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.i_clk ) begin
      \stage_64.HWBFLY.bfly.mpy_r  <= _517_;
      \stage_64.HWBFLY.bfly.mpy_i  <= _516_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _546_ = \stage_64.HWBFLY.bfly.do_rnd_left_i.o_val ;
    if (\stage_64.HWBFLY.bfly.do_rnd_left_i.i_ce ) begin
      if (_548_) begin
        _546_ = \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_549_) begin
          _546_ = \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _546_ = \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _546_ = \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.do_rnd_left_i.i_clk ) begin
      \stage_64.HWBFLY.bfly.do_rnd_left_i.o_val  <= _546_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _550_ = \stage_64.HWBFLY.bfly.do_rnd_left_r.o_val ;
    if (\stage_64.HWBFLY.bfly.do_rnd_left_r.i_ce ) begin
      if (_552_) begin
        _550_ = \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_553_) begin
          _550_ = \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _550_ = \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _550_ = \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.do_rnd_left_r.i_clk ) begin
      \stage_64.HWBFLY.bfly.do_rnd_left_r.o_val  <= _550_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _554_ = \stage_64.HWBFLY.bfly.do_rnd_right_i.o_val ;
    if (\stage_64.HWBFLY.bfly.do_rnd_right_i.i_ce ) begin
      if (_556_) begin
        _554_ = \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_557_) begin
          _554_ = \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _554_ = \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _554_ = \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.do_rnd_right_i.i_clk ) begin
      \stage_64.HWBFLY.bfly.do_rnd_right_i.o_val  <= _554_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _558_ = \stage_64.HWBFLY.bfly.do_rnd_right_r.o_val ;
    if (\stage_64.HWBFLY.bfly.do_rnd_right_r.i_ce ) begin
      if (_560_) begin
        _558_ = \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_561_) begin
          _558_ = \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _558_ = \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _558_ = \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_64.HWBFLY.bfly.do_rnd_right_r.i_clk ) begin
      \stage_64.HWBFLY.bfly.do_rnd_right_r.o_val  <= _558_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _571_ = 40'h4000000000;
    _572_ = 40'h2d4142d414;
    _573_ = 40'h0000040000;
    _574_ = 40'hd2bec2d414;
  end
  always @* begin
      \stage_8.cmem[0]  <= _571_;
      \stage_8.cmem[1]  <= _572_;
      \stage_8.cmem[2]  <= _573_;
      \stage_8.cmem[3]  <= _574_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _601_ = 1'h1;
  end
  always @* begin
  end
  initial begin
      \stage_8.wait_for_sync  <= _601_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _597_ = 3'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.iaddr  <= _597_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _598_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.ib_sync  <= _598_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _600_ = 3'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.oaddr  <= _600_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _599_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.o_sync  <= _599_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _596_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.b_started  <= _596_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _580_ = 1'h0;
  end
  always @* begin
      \stage_8.idle  <= _580_;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _587_ = \stage_8.wait_for_sync ;
    _575_ = \stage_8.iaddr ;
    if (\stage_8.i_reset ) begin
      _587_ = 1'h1;
      _575_ = 3'h0;
    end else begin
      if (_608_) begin
        _575_ = _603_;
        _587_ = 1'h0;
      end else begin
      end
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.wait_for_sync  <= _587_;
      \stage_8.iaddr  <= _575_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _564_ = _590_;
    _565_ = _591_;
    _566_ = _592_;
    if (_609_) begin
      _590_ = \stage_8.iaddr [1:0];
      _591_ = \stage_8.i_data ;
      _592_ = 32'd4294967295;
    end else begin
      _590_ = 2'hx;
      _591_ = 32'hxxxxxxxx;
      _592_ = 32'd0;
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      _629_ <= _564_;
      _630_ <= _565_;
      _631_ <= _566_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _579_ = \stage_8.ib_sync ;
    if (\stage_8.i_reset ) begin
      _579_ = 1'h0;
    end else begin
      if (\stage_8.i_ce ) begin
        _579_ = _606_;
      end else begin
      end
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.ib_sync  <= _579_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _576_ = \stage_8.ib_a ;
    _577_ = \stage_8.ib_b ;
    _578_ = \stage_8.ib_c ;
    _562_ = _588_;
    _563_ = _589_;
    if (\stage_8.i_ce ) begin
      _576_ = _627_;
      _577_ = \stage_8.i_data ;
      _588_ = \stage_8.iaddr [1:0];
      _589_ = _602_;
      _578_ = _602_;
      casez (\stage_8.iaddr [1:0])
        2'h0:
            _602_ = \stage_8.cmem[0] ;
        2'h1:
            _602_ = \stage_8.cmem[1] ;
        2'h2:
            _602_ = \stage_8.cmem[2] ;
        2'h3:
            _602_ = \stage_8.cmem[3] ;
        default:
            _602_ = 40'hxxxxxxxxxx;
      endcase
    end else begin
      _588_ = _625_;
      _589_ = _626_;
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.ib_a  <= _576_;
      \stage_8.ib_b  <= _577_;
      \stage_8.ib_c  <= _578_;
      _625_ <= 2'hx;
      _626_ <= 40'hxxxxxxxxxx;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _584_ = \stage_8.o_sync ;
    _570_ = \stage_8.b_started ;
    _585_ = \stage_8.oaddr ;
    if (\stage_8.i_reset ) begin
      _585_ = 3'h0;
      _584_ = 1'h0;
      _570_ = 1'h0;
    end else begin
      if (\stage_8.i_ce ) begin
        _584_ = _638_;
        if (_624_) begin
          _585_ = _604_;
        end else begin
        end
        if (_611_) begin
          _570_ = 1'h1;
        end else begin
        end
      end else begin
      end
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.o_sync  <= _584_;
      \stage_8.b_started  <= _570_;
      \stage_8.oaddr  <= _585_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _581_ = \stage_8.nxt_oaddr [0];
    if (\stage_8.i_ce ) begin
      _581_ = \stage_8.oaddr [0];
    end else begin
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.nxt_oaddr [0] <= _581_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _582_ = \stage_8.nxt_oaddr [1];
    if (\stage_8.i_ce ) begin
      _582_ = _605_;
    end else begin
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.nxt_oaddr [1] <= _582_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _567_ = _593_;
    _568_ = _594_;
    _569_ = _595_;
    if (_612_) begin
      _593_ = \stage_8.oaddr [1:0];
      _594_ = \stage_8.ob_b ;
      _595_ = 32'd4294967295;
    end else begin
      _593_ = 2'hx;
      _594_ = 32'hxxxxxxxx;
      _595_ = 32'd0;
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      _632_ <= _567_;
      _633_ <= _568_;
      _634_ <= _569_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _586_ = \stage_8.pre_ovalue ;
    if (\stage_8.i_ce ) begin
      _586_ = _628_;
    end else begin
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.pre_ovalue  <= _586_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _583_ = \stage_8.o_data ;
    if (\stage_8.i_ce ) begin
      _583_ = _639_;
    end else begin
    end
  end
  always @(posedge \stage_8.i_clk ) begin
      \stage_8.o_data  <= _583_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _670_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.HWBFLY.bfly.r_aux  <= _670_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _671_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.HWBFLY.bfly.r_aux_2  <= _671_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _667_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_8.HWBFLY.bfly.leftv  <= _667_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _668_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_8.HWBFLY.bfly.leftvv  <= _668_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _666_ = 35'h000000000;
  end
  always @* begin
  end
  initial begin
      \stage_8.HWBFLY.bfly.left_saved  <= _666_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _669_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      \stage_8.HWBFLY.bfly.o_aux  <= _669_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _657_ = \stage_8.HWBFLY.bfly.r_aux ;
    _658_ = \stage_8.HWBFLY.bfly.r_aux_2 ;
    if (\stage_8.HWBFLY.bfly.i_reset ) begin
      _657_ = 1'h0;
      _658_ = 1'h0;
    end else begin
      if (\stage_8.HWBFLY.bfly.i_ce ) begin
        _657_ = \stage_8.HWBFLY.bfly.i_aux ;
        _658_ = \stage_8.HWBFLY.bfly.r_aux ;
      end else begin
      end
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.r_aux  <= _657_;
      \stage_8.HWBFLY.bfly.r_aux_2  <= _658_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _662_ = \stage_8.HWBFLY.bfly.r_left ;
    _663_ = \stage_8.HWBFLY.bfly.r_right ;
    _659_ = \stage_8.HWBFLY.bfly.r_coef ;
    _650_ = \stage_8.HWBFLY.bfly.ir_coef_r ;
    _649_ = \stage_8.HWBFLY.bfly.ir_coef_i ;
    _665_ = \stage_8.HWBFLY.bfly.r_sum_r ;
    _664_ = \stage_8.HWBFLY.bfly.r_sum_i ;
    _661_ = \stage_8.HWBFLY.bfly.r_dif_r ;
    _660_ = \stage_8.HWBFLY.bfly.r_dif_i ;
    if (\stage_8.HWBFLY.bfly.i_ce ) begin
      _662_ = \stage_8.HWBFLY.bfly.i_left ;
      _663_ = \stage_8.HWBFLY.bfly.i_right ;
      _659_ = \stage_8.HWBFLY.bfly.i_coef ;
      _665_ = _672_;
      _664_ = _673_;
      _661_ = _679_;
      _660_ = _680_;
      _650_ = \stage_8.HWBFLY.bfly.r_coef [39:20];
      _649_ = \stage_8.HWBFLY.bfly.r_coef [19:0];
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.r_left  <= _662_;
      \stage_8.HWBFLY.bfly.r_right  <= _663_;
      \stage_8.HWBFLY.bfly.r_coef  <= _659_;
      \stage_8.HWBFLY.bfly.ir_coef_r  <= _650_;
      \stage_8.HWBFLY.bfly.ir_coef_i  <= _649_;
      \stage_8.HWBFLY.bfly.r_sum_r  <= _665_;
      \stage_8.HWBFLY.bfly.r_sum_i  <= _664_;
      \stage_8.HWBFLY.bfly.r_dif_r  <= _661_;
      \stage_8.HWBFLY.bfly.r_dif_i  <= _660_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _652_ = \stage_8.HWBFLY.bfly.leftv ;
    _653_ = \stage_8.HWBFLY.bfly.leftvv ;
    if (\stage_8.HWBFLY.bfly.i_reset ) begin
      _652_ = 35'h000000000;
      _653_ = 35'h000000000;
    end else begin
      if (\stage_8.HWBFLY.bfly.i_ce ) begin
        _652_ = { \stage_8.HWBFLY.bfly.r_aux_2 , \stage_8.HWBFLY.bfly.r_sum_r , \stage_8.HWBFLY.bfly.r_sum_i  };
        _653_ = \stage_8.HWBFLY.bfly.leftv ;
      end else begin
      end
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.leftv  <= _652_;
      \stage_8.HWBFLY.bfly.leftvv  <= _653_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _640_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.p1c_in ;
    _642_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.p2c_in ;
    _641_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.p1d_in ;
    _643_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.p2d_in ;
    _644_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.p3c_in ;
    _645_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.p3d_in ;
    if (\stage_8.HWBFLY.bfly.i_ce ) begin
      _640_ = \stage_8.HWBFLY.bfly.ir_coef_r ;
      _642_ = \stage_8.HWBFLY.bfly.ir_coef_i ;
      _641_ = \stage_8.HWBFLY.bfly.r_dif_r ;
      _643_ = \stage_8.HWBFLY.bfly.r_dif_i ;
      _644_ = _674_;
      _645_ = _675_;
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.CKPCE_ONE.p1c_in  <= _640_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.p2c_in  <= _642_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.p1d_in  <= _641_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.p2d_in  <= _643_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.p3c_in  <= _644_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.p3d_in  <= _645_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _646_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_one ;
    _648_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_two ;
    _647_ = \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_three ;
    if (\stage_8.HWBFLY.bfly.i_ce ) begin
      _646_ = _676_;
      _648_ = _677_;
      _647_ = _678_;
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_one  <= _646_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_two  <= _648_;
      \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_three  <= _647_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _656_ = \stage_8.HWBFLY.bfly.o_aux ;
    _651_ = \stage_8.HWBFLY.bfly.left_saved ;
    if (\stage_8.HWBFLY.bfly.i_reset ) begin
      _651_ = 35'h000000000;
      _656_ = 1'h0;
    end else begin
      if (\stage_8.HWBFLY.bfly.i_ce ) begin
        _651_ = \stage_8.HWBFLY.bfly.leftvv ;
        _656_ = \stage_8.HWBFLY.bfly.aux_s ;
      end else begin
      end
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.o_aux  <= _656_;
      \stage_8.HWBFLY.bfly.left_saved  <= _651_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _655_ = \stage_8.HWBFLY.bfly.mpy_r ;
    _654_ = \stage_8.HWBFLY.bfly.mpy_i ;
    if (\stage_8.HWBFLY.bfly.i_ce ) begin
      _655_ = _681_;
      _654_ = _683_;
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.i_clk ) begin
      \stage_8.HWBFLY.bfly.mpy_r  <= _655_;
      \stage_8.HWBFLY.bfly.mpy_i  <= _654_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _684_ = \stage_8.HWBFLY.bfly.do_rnd_left_i.o_val ;
    if (\stage_8.HWBFLY.bfly.do_rnd_left_i.i_ce ) begin
      if (_686_) begin
        _684_ = \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_687_) begin
          _684_ = \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _684_ = \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _684_ = \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.do_rnd_left_i.i_clk ) begin
      \stage_8.HWBFLY.bfly.do_rnd_left_i.o_val  <= _684_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _688_ = \stage_8.HWBFLY.bfly.do_rnd_left_r.o_val ;
    if (\stage_8.HWBFLY.bfly.do_rnd_left_r.i_ce ) begin
      if (_690_) begin
        _688_ = \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_691_) begin
          _688_ = \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _688_ = \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _688_ = \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.do_rnd_left_r.i_clk ) begin
      \stage_8.HWBFLY.bfly.do_rnd_left_r.o_val  <= _688_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _692_ = \stage_8.HWBFLY.bfly.do_rnd_right_i.o_val ;
    if (\stage_8.HWBFLY.bfly.do_rnd_right_i.i_ce ) begin
      if (_694_) begin
        _692_ = \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_695_) begin
          _692_ = \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _692_ = \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _692_ = \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.do_rnd_right_i.i_clk ) begin
      \stage_8.HWBFLY.bfly.do_rnd_right_i.o_val  <= _692_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _696_ = \stage_8.HWBFLY.bfly.do_rnd_right_r.o_val ;
    if (\stage_8.HWBFLY.bfly.do_rnd_right_r.i_ce ) begin
      if (_698_) begin
        _696_ = \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
      end else begin
        if (_699_) begin
          _696_ = \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
        end else begin
          if (\stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit ) begin
            _696_ = \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up ;
          end else begin
            _696_ = \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value ;
          end
        end
      end
    end else begin
    end
  end
  always @(posedge \stage_8.HWBFLY.bfly.do_rnd_right_r.i_clk ) begin
      \stage_8.HWBFLY.bfly.do_rnd_right_r.o_val  <= _696_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _004_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      r_br_started <= _004_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _003_ = 1'h0;
  end
  always @* begin
  end
  initial begin
      o_sync <= _003_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _002_ = r_br_started;
    if (i_reset) begin
      _002_ = 1'h0;
    end else begin
      if (i_ce) begin
        _002_ = _701_;
      end else begin
      end
    end
  end
  always @(posedge i_clk) begin
      r_br_started <= _002_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _001_ = o_sync;
    if (i_reset) begin
      _001_ = 1'h0;
    end else begin
      if (i_ce) begin
        _001_ = br_sync;
      end else begin
      end
    end
  end
  always @(posedge i_clk) begin
      o_sync <= _001_;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$669 ) begin end
    _000_ = o_result;
    if (i_ce) begin
      _000_ = br_result;
    end else begin
    end
  end
  always @(posedge i_clk) begin
      o_result <= _000_;
  end
  assign br_start = _702_;
  assign \stage_64.HWBFLY.bfly.r_left_r  = \stage_64.HWBFLY.bfly.r_left [31:16];
  assign \stage_64.HWBFLY.bfly.r_left_i  = \stage_64.HWBFLY.bfly.r_left [15:0];
  assign \stage_64.HWBFLY.bfly.r_right_r  = \stage_64.HWBFLY.bfly.r_right [31:16];
  assign \stage_64.HWBFLY.bfly.r_right_i  = \stage_64.HWBFLY.bfly.r_right [15:0];
  assign \stage_64.HWBFLY.bfly.w_one  = { \stage_64.HWBFLY.bfly.p_one [36], \stage_64.HWBFLY.bfly.p_one [36], \stage_64.HWBFLY.bfly.p_one  };
  assign \stage_64.HWBFLY.bfly.w_two  = { \stage_64.HWBFLY.bfly.p_two [36], \stage_64.HWBFLY.bfly.p_two [36], \stage_64.HWBFLY.bfly.p_two  };
  assign \stage_64.HWBFLY.bfly.left_sr  = { \stage_64.HWBFLY.bfly.left_saved [33], \stage_64.HWBFLY.bfly.left_saved [33], \stage_64.HWBFLY.bfly.left_saved [33:17], 18'h00000 };
  assign \stage_64.HWBFLY.bfly.left_si  = { \stage_64.HWBFLY.bfly.left_saved [16], \stage_64.HWBFLY.bfly.left_saved [16], \stage_64.HWBFLY.bfly.left_saved [16:0], 18'h00000 };
  assign \stage_64.HWBFLY.bfly.aux_s  = \stage_64.HWBFLY.bfly.left_saved [34];
  assign \stage_64.HWBFLY.bfly.o_left  = { \stage_64.HWBFLY.bfly.rnd_left_r , \stage_64.HWBFLY.bfly.rnd_left_i  };
  assign \stage_64.HWBFLY.bfly.o_right  = { \stage_64.HWBFLY.bfly.rnd_right_r , \stage_64.HWBFLY.bfly.rnd_right_i  };
  assign \stage_64.HWBFLY.bfly.p_one  = \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  assign \stage_64.HWBFLY.bfly.p_two  = \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  assign \stage_64.HWBFLY.bfly.p_three  = \stage_64.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_64.HWBFLY.bfly.do_rnd_left_r.i_val [34:19];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _551_;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_64.HWBFLY.bfly.do_rnd_left_r.i_val [18];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_64.HWBFLY.bfly.do_rnd_left_r.i_val [17:0];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.i_clk  = \stage_64.HWBFLY.bfly.i_clk ;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.i_ce  = \stage_64.HWBFLY.bfly.i_ce ;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_r.i_val  = \stage_64.HWBFLY.bfly.left_sr ;
  assign \stage_64.HWBFLY.bfly.rnd_left_r  = \stage_64.HWBFLY.bfly.do_rnd_left_r.o_val ;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_64.HWBFLY.bfly.do_rnd_left_i.i_val [34:19];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _547_;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_64.HWBFLY.bfly.do_rnd_left_i.i_val [18];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_64.HWBFLY.bfly.do_rnd_left_i.i_val [17:0];
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.i_clk  = \stage_64.HWBFLY.bfly.i_clk ;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.i_ce  = \stage_64.HWBFLY.bfly.i_ce ;
  assign \stage_64.HWBFLY.bfly.do_rnd_left_i.i_val  = \stage_64.HWBFLY.bfly.left_si ;
  assign \stage_64.HWBFLY.bfly.rnd_left_i  = \stage_64.HWBFLY.bfly.do_rnd_left_i.o_val ;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_64.HWBFLY.bfly.do_rnd_right_r.i_val [34:19];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _559_;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_64.HWBFLY.bfly.do_rnd_right_r.i_val [18];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_64.HWBFLY.bfly.do_rnd_right_r.i_val [17:0];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.i_clk  = \stage_64.HWBFLY.bfly.i_clk ;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.i_ce  = \stage_64.HWBFLY.bfly.i_ce ;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_r.i_val  = \stage_64.HWBFLY.bfly.mpy_r ;
  assign \stage_64.HWBFLY.bfly.rnd_right_r  = \stage_64.HWBFLY.bfly.do_rnd_right_r.o_val ;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_64.HWBFLY.bfly.do_rnd_right_i.i_val [34:19];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _555_;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_64.HWBFLY.bfly.do_rnd_right_i.i_val [18];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_64.HWBFLY.bfly.do_rnd_right_i.i_val [17:0];
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.i_clk  = \stage_64.HWBFLY.bfly.i_clk ;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.i_ce  = \stage_64.HWBFLY.bfly.i_ce ;
  assign \stage_64.HWBFLY.bfly.do_rnd_right_i.i_val  = \stage_64.HWBFLY.bfly.mpy_i ;
  assign \stage_64.HWBFLY.bfly.rnd_right_i  = \stage_64.HWBFLY.bfly.do_rnd_right_i.o_val ;
  assign \stage_64.HWBFLY.bfly.i_clk  = \stage_64.i_clk ;
  assign \stage_64.HWBFLY.bfly.i_reset  = \stage_64.i_reset ;
  assign \stage_64.HWBFLY.bfly.i_ce  = \stage_64.i_ce ;
  assign \stage_64.HWBFLY.bfly.i_coef  = _497_;
  assign \stage_64.HWBFLY.bfly.i_left  = _498_;
  assign \stage_64.HWBFLY.bfly.i_right  = _499_;
  assign \stage_64.HWBFLY.bfly.i_aux  = _472_;
  assign \stage_64.ob_a  = \stage_64.HWBFLY.bfly.o_left ;
  assign \stage_64.ob_b  = \stage_64.HWBFLY.bfly.o_right ;
  assign \stage_64.ob_sync  = \stage_64.HWBFLY.bfly.o_aux ;
  assign \stage_64.i_clk  = i_clk;
  assign \stage_64.i_reset  = i_reset;
  assign \stage_64.i_ce  = i_ce;
  assign \stage_64.i_sync  = _700_;
  assign \stage_64.i_data  = i_sample;
  assign w_d64 = \stage_64.o_data ;
  assign w_s64 = \stage_64.o_sync ;
  assign \stage_32.HWBFLY.bfly.r_left_r  = \stage_32.HWBFLY.bfly.r_left [31:16];
  assign \stage_32.HWBFLY.bfly.r_left_i  = \stage_32.HWBFLY.bfly.r_left [15:0];
  assign \stage_32.HWBFLY.bfly.r_right_r  = \stage_32.HWBFLY.bfly.r_right [31:16];
  assign \stage_32.HWBFLY.bfly.r_right_i  = \stage_32.HWBFLY.bfly.r_right [15:0];
  assign \stage_32.HWBFLY.bfly.w_one  = { \stage_32.HWBFLY.bfly.p_one [36], \stage_32.HWBFLY.bfly.p_one [36], \stage_32.HWBFLY.bfly.p_one  };
  assign \stage_32.HWBFLY.bfly.w_two  = { \stage_32.HWBFLY.bfly.p_two [36], \stage_32.HWBFLY.bfly.p_two [36], \stage_32.HWBFLY.bfly.p_two  };
  assign \stage_32.HWBFLY.bfly.left_sr  = { \stage_32.HWBFLY.bfly.left_saved [33], \stage_32.HWBFLY.bfly.left_saved [33], \stage_32.HWBFLY.bfly.left_saved [33:17], 18'h00000 };
  assign \stage_32.HWBFLY.bfly.left_si  = { \stage_32.HWBFLY.bfly.left_saved [16], \stage_32.HWBFLY.bfly.left_saved [16], \stage_32.HWBFLY.bfly.left_saved [16:0], 18'h00000 };
  assign \stage_32.HWBFLY.bfly.aux_s  = \stage_32.HWBFLY.bfly.left_saved [34];
  assign \stage_32.HWBFLY.bfly.o_left  = { \stage_32.HWBFLY.bfly.rnd_left_r , \stage_32.HWBFLY.bfly.rnd_left_i  };
  assign \stage_32.HWBFLY.bfly.o_right  = { \stage_32.HWBFLY.bfly.rnd_right_r , \stage_32.HWBFLY.bfly.rnd_right_i  };
  assign \stage_32.HWBFLY.bfly.p_one  = \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  assign \stage_32.HWBFLY.bfly.p_two  = \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  assign \stage_32.HWBFLY.bfly.p_three  = \stage_32.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_32.HWBFLY.bfly.do_rnd_left_r.i_val [34:19];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _340_;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_32.HWBFLY.bfly.do_rnd_left_r.i_val [18];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_32.HWBFLY.bfly.do_rnd_left_r.i_val [17:0];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.i_clk  = \stage_32.HWBFLY.bfly.i_clk ;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.i_ce  = \stage_32.HWBFLY.bfly.i_ce ;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_r.i_val  = \stage_32.HWBFLY.bfly.left_sr ;
  assign \stage_32.HWBFLY.bfly.rnd_left_r  = \stage_32.HWBFLY.bfly.do_rnd_left_r.o_val ;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_32.HWBFLY.bfly.do_rnd_left_i.i_val [34:19];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _336_;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_32.HWBFLY.bfly.do_rnd_left_i.i_val [18];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_32.HWBFLY.bfly.do_rnd_left_i.i_val [17:0];
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.i_clk  = \stage_32.HWBFLY.bfly.i_clk ;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.i_ce  = \stage_32.HWBFLY.bfly.i_ce ;
  assign \stage_32.HWBFLY.bfly.do_rnd_left_i.i_val  = \stage_32.HWBFLY.bfly.left_si ;
  assign \stage_32.HWBFLY.bfly.rnd_left_i  = \stage_32.HWBFLY.bfly.do_rnd_left_i.o_val ;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_32.HWBFLY.bfly.do_rnd_right_r.i_val [34:19];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _348_;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_32.HWBFLY.bfly.do_rnd_right_r.i_val [18];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_32.HWBFLY.bfly.do_rnd_right_r.i_val [17:0];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.i_clk  = \stage_32.HWBFLY.bfly.i_clk ;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.i_ce  = \stage_32.HWBFLY.bfly.i_ce ;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_r.i_val  = \stage_32.HWBFLY.bfly.mpy_r ;
  assign \stage_32.HWBFLY.bfly.rnd_right_r  = \stage_32.HWBFLY.bfly.do_rnd_right_r.o_val ;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_32.HWBFLY.bfly.do_rnd_right_i.i_val [34:19];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _344_;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_32.HWBFLY.bfly.do_rnd_right_i.i_val [18];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_32.HWBFLY.bfly.do_rnd_right_i.i_val [17:0];
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.i_clk  = \stage_32.HWBFLY.bfly.i_clk ;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.i_ce  = \stage_32.HWBFLY.bfly.i_ce ;
  assign \stage_32.HWBFLY.bfly.do_rnd_right_i.i_val  = \stage_32.HWBFLY.bfly.mpy_i ;
  assign \stage_32.HWBFLY.bfly.rnd_right_i  = \stage_32.HWBFLY.bfly.do_rnd_right_i.o_val ;
  assign \stage_32.HWBFLY.bfly.i_clk  = \stage_32.i_clk ;
  assign \stage_32.HWBFLY.bfly.i_reset  = \stage_32.i_reset ;
  assign \stage_32.HWBFLY.bfly.i_ce  = \stage_32.i_ce ;
  assign \stage_32.HWBFLY.bfly.i_coef  = _286_;
  assign \stage_32.HWBFLY.bfly.i_left  = _287_;
  assign \stage_32.HWBFLY.bfly.i_right  = _288_;
  assign \stage_32.HWBFLY.bfly.i_aux  = _261_;
  assign \stage_32.ob_a  = \stage_32.HWBFLY.bfly.o_left ;
  assign \stage_32.ob_b  = \stage_32.HWBFLY.bfly.o_right ;
  assign \stage_32.ob_sync  = \stage_32.HWBFLY.bfly.o_aux ;
  assign \stage_32.i_clk  = i_clk;
  assign \stage_32.i_reset  = i_reset;
  assign \stage_32.i_ce  = i_ce;
  assign \stage_32.i_sync  = w_s64;
  assign \stage_32.i_data  = w_d64;
  assign w_d32 = \stage_32.o_data ;
  assign w_s32 = \stage_32.o_sync ;
  assign \stage_16.HWBFLY.bfly.r_left_r  = \stage_16.HWBFLY.bfly.r_left [31:16];
  assign \stage_16.HWBFLY.bfly.r_left_i  = \stage_16.HWBFLY.bfly.r_left [15:0];
  assign \stage_16.HWBFLY.bfly.r_right_r  = \stage_16.HWBFLY.bfly.r_right [31:16];
  assign \stage_16.HWBFLY.bfly.r_right_i  = \stage_16.HWBFLY.bfly.r_right [15:0];
  assign \stage_16.HWBFLY.bfly.w_one  = { \stage_16.HWBFLY.bfly.p_one [36], \stage_16.HWBFLY.bfly.p_one [36], \stage_16.HWBFLY.bfly.p_one  };
  assign \stage_16.HWBFLY.bfly.w_two  = { \stage_16.HWBFLY.bfly.p_two [36], \stage_16.HWBFLY.bfly.p_two [36], \stage_16.HWBFLY.bfly.p_two  };
  assign \stage_16.HWBFLY.bfly.left_sr  = { \stage_16.HWBFLY.bfly.left_saved [33], \stage_16.HWBFLY.bfly.left_saved [33], \stage_16.HWBFLY.bfly.left_saved [33:17], 18'h00000 };
  assign \stage_16.HWBFLY.bfly.left_si  = { \stage_16.HWBFLY.bfly.left_saved [16], \stage_16.HWBFLY.bfly.left_saved [16], \stage_16.HWBFLY.bfly.left_saved [16:0], 18'h00000 };
  assign \stage_16.HWBFLY.bfly.aux_s  = \stage_16.HWBFLY.bfly.left_saved [34];
  assign \stage_16.HWBFLY.bfly.o_left  = { \stage_16.HWBFLY.bfly.rnd_left_r , \stage_16.HWBFLY.bfly.rnd_left_i  };
  assign \stage_16.HWBFLY.bfly.o_right  = { \stage_16.HWBFLY.bfly.rnd_right_r , \stage_16.HWBFLY.bfly.rnd_right_i  };
  assign \stage_16.HWBFLY.bfly.p_one  = \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  assign \stage_16.HWBFLY.bfly.p_two  = \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  assign \stage_16.HWBFLY.bfly.p_three  = \stage_16.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_16.HWBFLY.bfly.do_rnd_left_r.i_val [34:19];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _164_;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_16.HWBFLY.bfly.do_rnd_left_r.i_val [18];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_16.HWBFLY.bfly.do_rnd_left_r.i_val [17:0];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.i_clk  = \stage_16.HWBFLY.bfly.i_clk ;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.i_ce  = \stage_16.HWBFLY.bfly.i_ce ;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_r.i_val  = \stage_16.HWBFLY.bfly.left_sr ;
  assign \stage_16.HWBFLY.bfly.rnd_left_r  = \stage_16.HWBFLY.bfly.do_rnd_left_r.o_val ;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_16.HWBFLY.bfly.do_rnd_left_i.i_val [34:19];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _160_;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_16.HWBFLY.bfly.do_rnd_left_i.i_val [18];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_16.HWBFLY.bfly.do_rnd_left_i.i_val [17:0];
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.i_clk  = \stage_16.HWBFLY.bfly.i_clk ;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.i_ce  = \stage_16.HWBFLY.bfly.i_ce ;
  assign \stage_16.HWBFLY.bfly.do_rnd_left_i.i_val  = \stage_16.HWBFLY.bfly.left_si ;
  assign \stage_16.HWBFLY.bfly.rnd_left_i  = \stage_16.HWBFLY.bfly.do_rnd_left_i.o_val ;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_16.HWBFLY.bfly.do_rnd_right_r.i_val [34:19];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _172_;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_16.HWBFLY.bfly.do_rnd_right_r.i_val [18];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_16.HWBFLY.bfly.do_rnd_right_r.i_val [17:0];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.i_clk  = \stage_16.HWBFLY.bfly.i_clk ;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.i_ce  = \stage_16.HWBFLY.bfly.i_ce ;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_r.i_val  = \stage_16.HWBFLY.bfly.mpy_r ;
  assign \stage_16.HWBFLY.bfly.rnd_right_r  = \stage_16.HWBFLY.bfly.do_rnd_right_r.o_val ;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_16.HWBFLY.bfly.do_rnd_right_i.i_val [34:19];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _168_;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_16.HWBFLY.bfly.do_rnd_right_i.i_val [18];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_16.HWBFLY.bfly.do_rnd_right_i.i_val [17:0];
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.i_clk  = \stage_16.HWBFLY.bfly.i_clk ;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.i_ce  = \stage_16.HWBFLY.bfly.i_ce ;
  assign \stage_16.HWBFLY.bfly.do_rnd_right_i.i_val  = \stage_16.HWBFLY.bfly.mpy_i ;
  assign \stage_16.HWBFLY.bfly.rnd_right_i  = \stage_16.HWBFLY.bfly.do_rnd_right_i.o_val ;
  assign \stage_16.HWBFLY.bfly.i_clk  = \stage_16.i_clk ;
  assign \stage_16.HWBFLY.bfly.i_reset  = \stage_16.i_reset ;
  assign \stage_16.HWBFLY.bfly.i_ce  = \stage_16.i_ce ;
  assign \stage_16.HWBFLY.bfly.i_coef  = _110_;
  assign \stage_16.HWBFLY.bfly.i_left  = _111_;
  assign \stage_16.HWBFLY.bfly.i_right  = _112_;
  assign \stage_16.HWBFLY.bfly.i_aux  = _085_;
  assign \stage_16.ob_a  = \stage_16.HWBFLY.bfly.o_left ;
  assign \stage_16.ob_b  = \stage_16.HWBFLY.bfly.o_right ;
  assign \stage_16.ob_sync  = \stage_16.HWBFLY.bfly.o_aux ;
  assign \stage_16.i_clk  = i_clk;
  assign \stage_16.i_reset  = i_reset;
  assign \stage_16.i_ce  = i_ce;
  assign \stage_16.i_sync  = w_s32;
  assign \stage_16.i_data  = w_d32;
  assign w_d16 = \stage_16.o_data ;
  assign w_s16 = \stage_16.o_sync ;
  assign \stage_8.HWBFLY.bfly.r_left_r  = \stage_8.HWBFLY.bfly.r_left [31:16];
  assign \stage_8.HWBFLY.bfly.r_left_i  = \stage_8.HWBFLY.bfly.r_left [15:0];
  assign \stage_8.HWBFLY.bfly.r_right_r  = \stage_8.HWBFLY.bfly.r_right [31:16];
  assign \stage_8.HWBFLY.bfly.r_right_i  = \stage_8.HWBFLY.bfly.r_right [15:0];
  assign \stage_8.HWBFLY.bfly.w_one  = { \stage_8.HWBFLY.bfly.p_one [36], \stage_8.HWBFLY.bfly.p_one [36], \stage_8.HWBFLY.bfly.p_one  };
  assign \stage_8.HWBFLY.bfly.w_two  = { \stage_8.HWBFLY.bfly.p_two [36], \stage_8.HWBFLY.bfly.p_two [36], \stage_8.HWBFLY.bfly.p_two  };
  assign \stage_8.HWBFLY.bfly.left_sr  = { \stage_8.HWBFLY.bfly.left_saved [33], \stage_8.HWBFLY.bfly.left_saved [33], \stage_8.HWBFLY.bfly.left_saved [33:17], 18'h00000 };
  assign \stage_8.HWBFLY.bfly.left_si  = { \stage_8.HWBFLY.bfly.left_saved [16], \stage_8.HWBFLY.bfly.left_saved [16], \stage_8.HWBFLY.bfly.left_saved [16:0], 18'h00000 };
  assign \stage_8.HWBFLY.bfly.aux_s  = \stage_8.HWBFLY.bfly.left_saved [34];
  assign \stage_8.HWBFLY.bfly.o_left  = { \stage_8.HWBFLY.bfly.rnd_left_r , \stage_8.HWBFLY.bfly.rnd_left_i  };
  assign \stage_8.HWBFLY.bfly.o_right  = { \stage_8.HWBFLY.bfly.rnd_right_r , \stage_8.HWBFLY.bfly.rnd_right_i  };
  assign \stage_8.HWBFLY.bfly.p_one  = \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_one ;
  assign \stage_8.HWBFLY.bfly.p_two  = \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_two ;
  assign \stage_8.HWBFLY.bfly.p_three  = \stage_8.HWBFLY.bfly.CKPCE_ONE.rp_three ;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_8.HWBFLY.bfly.do_rnd_left_r.i_val [34:19];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _689_;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_8.HWBFLY.bfly.do_rnd_left_r.i_val [18];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_8.HWBFLY.bfly.do_rnd_left_r.i_val [17:0];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.i_clk  = \stage_8.HWBFLY.bfly.i_clk ;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.i_ce  = \stage_8.HWBFLY.bfly.i_ce ;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_r.i_val  = \stage_8.HWBFLY.bfly.left_sr ;
  assign \stage_8.HWBFLY.bfly.rnd_left_r  = \stage_8.HWBFLY.bfly.do_rnd_left_r.o_val ;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_8.HWBFLY.bfly.do_rnd_left_i.i_val [34:19];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _685_;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_8.HWBFLY.bfly.do_rnd_left_i.i_val [18];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_8.HWBFLY.bfly.do_rnd_left_i.i_val [17:0];
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.i_clk  = \stage_8.HWBFLY.bfly.i_clk ;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.i_ce  = \stage_8.HWBFLY.bfly.i_ce ;
  assign \stage_8.HWBFLY.bfly.do_rnd_left_i.i_val  = \stage_8.HWBFLY.bfly.left_si ;
  assign \stage_8.HWBFLY.bfly.rnd_left_i  = \stage_8.HWBFLY.bfly.do_rnd_left_i.o_val ;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_8.HWBFLY.bfly.do_rnd_right_r.i_val [34:19];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _697_;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_8.HWBFLY.bfly.do_rnd_right_r.i_val [18];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_8.HWBFLY.bfly.do_rnd_right_r.i_val [17:0];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.i_clk  = \stage_8.HWBFLY.bfly.i_clk ;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.i_ce  = \stage_8.HWBFLY.bfly.i_ce ;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_r.i_val  = \stage_8.HWBFLY.bfly.mpy_r ;
  assign \stage_8.HWBFLY.bfly.rnd_right_r  = \stage_8.HWBFLY.bfly.do_rnd_right_r.o_val ;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_8.HWBFLY.bfly.do_rnd_right_i.i_val [34:19];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _693_;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_8.HWBFLY.bfly.do_rnd_right_i.i_val [18];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.genblk1.genblk1.genblk1.genblk1.other_lost_bits  = \stage_8.HWBFLY.bfly.do_rnd_right_i.i_val [17:0];
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.i_clk  = \stage_8.HWBFLY.bfly.i_clk ;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.i_ce  = \stage_8.HWBFLY.bfly.i_ce ;
  assign \stage_8.HWBFLY.bfly.do_rnd_right_i.i_val  = \stage_8.HWBFLY.bfly.mpy_i ;
  assign \stage_8.HWBFLY.bfly.rnd_right_i  = \stage_8.HWBFLY.bfly.do_rnd_right_i.o_val ;
  assign \stage_8.HWBFLY.bfly.i_clk  = \stage_8.i_clk ;
  assign \stage_8.HWBFLY.bfly.i_reset  = \stage_8.i_reset ;
  assign \stage_8.HWBFLY.bfly.i_ce  = \stage_8.i_ce ;
  assign \stage_8.HWBFLY.bfly.i_coef  = _635_;
  assign \stage_8.HWBFLY.bfly.i_left  = _636_;
  assign \stage_8.HWBFLY.bfly.i_right  = _637_;
  assign \stage_8.HWBFLY.bfly.i_aux  = _610_;
  assign \stage_8.ob_a  = \stage_8.HWBFLY.bfly.o_left ;
  assign \stage_8.ob_b  = \stage_8.HWBFLY.bfly.o_right ;
  assign \stage_8.ob_sync  = \stage_8.HWBFLY.bfly.o_aux ;
  assign \stage_8.i_clk  = i_clk;
  assign \stage_8.i_reset  = i_reset;
  assign \stage_8.i_ce  = i_ce;
  assign \stage_8.i_sync  = w_s16;
  assign \stage_8.i_data  = w_d16;
  assign w_d8 = \stage_8.o_data ;
  assign w_s8 = \stage_8.o_sync ;
  assign \stage_4.ob_b  = { \stage_4.ob_b_r , \stage_4.ob_b_i  };
  assign \stage_4.imem_r  = \stage_4.imem[1] [31:16];
  assign \stage_4.imem_i  = \stage_4.imem[1] [15:0];
  assign \stage_4.i_data_r  = \stage_4.i_data [31:16];
  assign \stage_4.i_data_i  = \stage_4.i_data [15:0];
  assign \stage_4.n_rnd_diff_r  = _380_;
  assign \stage_4.n_rnd_diff_i  = _381_;
  assign \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_4.do_rnd_sum_r.i_val [16:1];
  assign \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _394_;
  assign \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_4.do_rnd_sum_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_4.do_rnd_sum_r.i_val [0];
  assign \stage_4.do_rnd_sum_r.i_clk  = \stage_4.i_clk ;
  assign \stage_4.do_rnd_sum_r.i_ce  = \stage_4.i_ce ;
  assign \stage_4.do_rnd_sum_r.i_val  = \stage_4.sum_r ;
  assign \stage_4.rnd_sum_r  = \stage_4.do_rnd_sum_r.o_val ;
  assign \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_4.do_rnd_sum_i.i_val [16:1];
  assign \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _391_;
  assign \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_4.do_rnd_sum_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_4.do_rnd_sum_i.i_val [0];
  assign \stage_4.do_rnd_sum_i.i_clk  = \stage_4.i_clk ;
  assign \stage_4.do_rnd_sum_i.i_ce  = \stage_4.i_ce ;
  assign \stage_4.do_rnd_sum_i.i_val  = \stage_4.sum_i ;
  assign \stage_4.rnd_sum_i  = \stage_4.do_rnd_sum_i.o_val ;
  assign \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_4.do_rnd_diff_r.i_val [16:1];
  assign \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.rounded_up  = _388_;
  assign \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_4.do_rnd_diff_r.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_4.do_rnd_diff_r.i_val [0];
  assign \stage_4.do_rnd_diff_r.i_clk  = \stage_4.i_clk ;
  assign \stage_4.do_rnd_diff_r.i_ce  = \stage_4.i_ce ;
  assign \stage_4.do_rnd_diff_r.i_val  = \stage_4.diff_r ;
  assign \stage_4.rnd_diff_r  = \stage_4.do_rnd_diff_r.o_val ;
  assign \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.truncated_value  = \stage_4.do_rnd_diff_i.i_val [16:1];
  assign \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.rounded_up  = _385_;
  assign \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.last_valid_bit  = \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.truncated_value [0];
  assign \stage_4.do_rnd_diff_i.genblk1.genblk1.genblk1.genblk1.first_lost_bit  = \stage_4.do_rnd_diff_i.i_val [0];
  assign \stage_4.do_rnd_diff_i.i_clk  = \stage_4.i_clk ;
  assign \stage_4.do_rnd_diff_i.i_ce  = \stage_4.i_ce ;
  assign \stage_4.do_rnd_diff_i.i_val  = \stage_4.diff_i ;
  assign \stage_4.rnd_diff_i  = \stage_4.do_rnd_diff_i.o_val ;
  assign \stage_4.i_clk  = i_clk;
  assign \stage_4.i_reset  = i_reset;
  assign \stage_4.i_ce  = i_ce;
  assign \stage_4.i_sync  = w_s8;
  assign \stage_4.i_data  = w_d8;
  assign w_d4 = \stage_4.o_data ;
  assign w_s4 = \stage_4.o_sync ;
  assign \stage_2.i_r  = \stage_2.i_val [31:16];
  assign \stage_2.i_i  = \stage_2.i_val [15:0];
  assign \stage_2.o_val  = { \stage_2.o_r , \stage_2.o_i  };
  assign \stage_2.do_rnd_r.i_clk  = \stage_2.i_clk ;
  assign \stage_2.do_rnd_r.i_ce  = \stage_2.i_ce ;
  assign \stage_2.do_rnd_r.i_val  = \stage_2.rnd_r ;
  assign \stage_2.o_r  = \stage_2.do_rnd_r.o_val ;
  assign \stage_2.do_rnd_i.i_clk  = \stage_2.i_clk ;
  assign \stage_2.do_rnd_i.i_ce  = \stage_2.i_ce ;
  assign \stage_2.do_rnd_i.i_val  = \stage_2.rnd_i ;
  assign \stage_2.o_i  = \stage_2.do_rnd_i.o_val ;
  assign \stage_2.i_clk  = i_clk;
  assign \stage_2.i_reset  = i_reset;
  assign \stage_2.i_ce  = i_ce;
  assign \stage_2.i_sync  = w_s4;
  assign \stage_2.i_val  = w_d4;
  assign w_d2 = \stage_2.o_val ;
  assign w_s2 = \stage_2.o_sync ;
  assign \revstage.rdaddr [6] = _026_;
  assign \revstage.rdaddr [0] = \revstage.wraddr [5];
  assign \revstage.rdaddr [1] = \revstage.wraddr [4];
  assign \revstage.rdaddr [2] = \revstage.wraddr [3];
  assign \revstage.rdaddr [3] = \revstage.wraddr [2];
  assign \revstage.rdaddr [4] = \revstage.wraddr [1];
  assign \revstage.rdaddr [5] = \revstage.wraddr [0];
  assign \revstage.i_clk  = i_clk;
  assign \revstage.i_reset  = i_reset;
  assign \revstage.i_ce  = _005_;
  assign \revstage.i_in  = w_d2;
  assign br_result = \revstage.o_out ;
  assign br_sync = \revstage.o_sync ;
endmodule
